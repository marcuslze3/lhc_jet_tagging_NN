-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jedi_dnn3_float_float_dense3_config_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    O_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    O_ce0 : OUT STD_LOGIC;
    O_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of jedi_dnn3_float_float_dense3_config_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_96 : STD_LOGIC_VECTOR (10 downto 0) := "00010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_144_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln395_fu_155_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln395_reg_213 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rows_fu_167_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rows_reg_221 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_sum_addr_1_reg_226 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln395_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cols_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cols_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln396_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal O_load_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal O_sum_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal O_sum_load_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal O_sum_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_sum_ce0 : STD_LOGIC;
    signal O_sum_we0 : STD_LOGIC;
    signal O_sum_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal O_sum_ce1 : STD_LOGIC;
    signal O_sum_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dnn3_float_float_dense3_config_s_fu_121_ap_start : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_ap_done : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_ap_idle : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_ap_ready : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce0 : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce1 : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_ce0 : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_we0 : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_ce1 : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_we1 : STD_LOGIC;
    signal grp_dnn3_float_float_dense3_config_s_fu_121_res_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln390_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_0_reg_87 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_98 : STD_LOGIC_VECTOR (10 downto 0);
    signal cols_0_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln391_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln397_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln397_2_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln397_1_fu_190_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln397_fu_194_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component dnn3_float_float_dense3_config_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        res_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        res_ce1 : OUT STD_LOGIC;
        res_we1 : OUT STD_LOGIC;
        res_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jedi_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jedi_dnn3_float_float_dense3_config_s_O_sum IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    O_sum_U : component jedi_dnn3_float_float_dense3_config_s_O_sum
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => O_sum_address0,
        ce0 => O_sum_ce0,
        we0 => O_sum_we0,
        d0 => O_sum_d0,
        q0 => O_sum_q0,
        address1 => grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address1,
        ce1 => O_sum_ce1,
        q1 => O_sum_q1);

    grp_dnn3_float_float_dense3_config_s_fu_121 : component dnn3_float_float_dense3_config_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dnn3_float_float_dense3_config_s_fu_121_ap_start,
        ap_done => grp_dnn3_float_float_dense3_config_s_fu_121_ap_done,
        ap_idle => grp_dnn3_float_float_dense3_config_s_fu_121_ap_idle,
        ap_ready => grp_dnn3_float_float_dense3_config_s_fu_121_ap_ready,
        input_r_address0 => grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address0,
        input_r_ce0 => grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce0,
        input_r_q0 => O_sum_q0,
        input_r_address1 => grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address1,
        input_r_ce1 => grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce1,
        input_r_q1 => O_sum_q1,
        res_address0 => grp_dnn3_float_float_dense3_config_s_fu_121_res_address0,
        res_ce0 => grp_dnn3_float_float_dense3_config_s_fu_121_res_ce0,
        res_we0 => grp_dnn3_float_float_dense3_config_s_fu_121_res_we0,
        res_d0 => grp_dnn3_float_float_dense3_config_s_fu_121_res_d0,
        res_address1 => grp_dnn3_float_float_dense3_config_s_fu_121_res_address1,
        res_ce1 => grp_dnn3_float_float_dense3_config_s_fu_121_res_ce1,
        res_we1 => grp_dnn3_float_float_dense3_config_s_fu_121_res_we1,
        res_d1 => grp_dnn3_float_float_dense3_config_s_fu_121_res_d1);

    jedi_fadd_32ns_32ns_32_4_full_dsp_1_U4578 : component jedi_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => O_sum_load_reg_249,
        din1 => O_load_reg_244,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln395_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dnn3_float_float_dense3_config_s_fu_121_ap_ready = ap_const_logic_1)) then 
                    grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cols_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln395_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                cols_0_reg_110 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                cols_0_reg_110 <= cols_reg_234;
            end if; 
        end if;
    end process;

    i_0_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln390_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_76 <= i_fu_144_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_76 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln390_fu_138_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_98 <= ap_const_lv11_0;
            elsif (((icmp_ln396_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_98 <= add_ln395_reg_213;
            end if; 
        end if;
    end process;

    rows_0_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln390_fu_138_p2 = ap_const_lv1_1))) then 
                rows_0_reg_87 <= ap_const_lv4_0;
            elsif (((icmp_ln396_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rows_0_reg_87 <= rows_reg_221;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                O_load_reg_244 <= O_q0;
                O_sum_load_reg_249 <= O_sum_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln395_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                O_sum_addr_1_reg_226 <= zext_ln397_fu_173_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln395_reg_213 <= add_ln395_fu_155_p2;
                rows_reg_221 <= rows_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cols_reg_234 <= cols_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_reg_254 <= grp_fu_134_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln395_fu_161_p2, ap_CS_fsm_state4, icmp_ln396_fu_178_p2, grp_dnn3_float_float_dense3_config_s_fu_121_ap_done, icmp_ln390_fu_138_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln390_fu_138_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln395_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln396_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_dnn3_float_float_dense3_config_s_fu_121_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    O_address0 <= zext_ln397_2_fu_200_p1(11 - 1 downto 0);

    O_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            O_ce0 <= ap_const_logic_1;
        else 
            O_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    O_sum_address0_assign_proc : process(ap_CS_fsm_state2, O_sum_addr_1_reg_226, ap_CS_fsm_state4, grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln391_fu_150_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            O_sum_address0 <= O_sum_addr_1_reg_226;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            O_sum_address0 <= zext_ln391_fu_150_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            O_sum_address0 <= grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address0;
        else 
            O_sum_address0 <= "XXXX";
        end if; 
    end process;


    O_sum_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            O_sum_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            O_sum_ce0 <= grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce0;
        else 
            O_sum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    O_sum_ce1_assign_proc : process(grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            O_sum_ce1 <= grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce1;
        else 
            O_sum_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    O_sum_d0_assign_proc : process(ap_CS_fsm_state2, tmp_reg_254, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            O_sum_d0 <= tmp_reg_254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            O_sum_d0 <= ap_const_lv32_0;
        else 
            O_sum_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    O_sum_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln390_fu_138_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln390_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            O_sum_we0 <= ap_const_logic_1;
        else 
            O_sum_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln395_fu_155_p2 <= std_logic_vector(unsigned(phi_mul_reg_98) + unsigned(ap_const_lv11_96));
    add_ln397_fu_194_p2 <= std_logic_vector(unsigned(phi_mul_reg_98) + unsigned(zext_ln397_1_fu_190_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_dnn3_float_float_dense3_config_s_fu_121_ap_done, ap_CS_fsm_state11)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_dnn3_float_float_dense3_config_s_fu_121_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dnn3_float_float_dense3_config_s_fu_121_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_dnn3_float_float_dense3_config_s_fu_121_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cols_fu_184_p2 <= std_logic_vector(unsigned(cols_0_reg_110) + unsigned(ap_const_lv8_1));
    grp_dnn3_float_float_dense3_config_s_fu_121_ap_start <= grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg;
    i_fu_144_p2 <= std_logic_vector(unsigned(i_0_reg_76) + unsigned(ap_const_lv4_1));
    icmp_ln390_fu_138_p2 <= "1" when (i_0_reg_76 = ap_const_lv4_A) else "0";
    icmp_ln395_fu_161_p2 <= "1" when (rows_0_reg_87 = ap_const_lv4_A) else "0";
    icmp_ln396_fu_178_p2 <= "1" when (cols_0_reg_110 = ap_const_lv8_96) else "0";
    res_address0 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_address0;
    res_address1 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_address1;
    res_ce0 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_ce0;
    res_ce1 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_ce1;
    res_d0 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_d0;
    res_d1 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_d1;
    res_we0 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_we0;
    res_we1 <= grp_dnn3_float_float_dense3_config_s_fu_121_res_we1;
    rows_fu_167_p2 <= std_logic_vector(unsigned(rows_0_reg_87) + unsigned(ap_const_lv4_1));
    zext_ln391_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_76),64));
    zext_ln397_1_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_0_reg_110),11));
    zext_ln397_2_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln397_fu_194_p2),64));
    zext_ln397_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_0_reg_87),64));
end behav;
