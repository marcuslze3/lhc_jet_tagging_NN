// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module jedi_dnn3_float_float_dense3_config_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        O_address0,
        O_ce0,
        O_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] O_address0;
output   O_ce0;
input  [31:0] O_q0;
output  [2:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;
output  [2:0] res_address1;
output   res_ce1;
output   res_we1;
output  [31:0] res_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg O_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_144_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln395_fu_155_p2;
reg   [10:0] add_ln395_reg_213;
wire    ap_CS_fsm_state3;
wire   [3:0] rows_fu_167_p2;
reg   [3:0] rows_reg_221;
reg   [3:0] O_sum_addr_1_reg_226;
wire   [0:0] icmp_ln395_fu_161_p2;
wire   [7:0] cols_fu_184_p2;
reg   [7:0] cols_reg_234;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln396_fu_178_p2;
reg   [31:0] O_load_reg_244;
wire    ap_CS_fsm_state5;
wire   [31:0] O_sum_q0;
reg   [31:0] O_sum_load_reg_249;
wire   [31:0] grp_fu_134_p2;
reg   [31:0] tmp_reg_254;
wire    ap_CS_fsm_state9;
reg   [3:0] O_sum_address0;
reg    O_sum_ce0;
reg    O_sum_we0;
reg   [31:0] O_sum_d0;
reg    O_sum_ce1;
wire   [31:0] O_sum_q1;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_ap_start;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_ap_done;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_ap_idle;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_ap_ready;
wire   [3:0] grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address0;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce0;
wire   [3:0] grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address1;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce1;
wire   [2:0] grp_dnn3_float_float_dense3_config_s_fu_121_res_address0;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_res_ce0;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_res_we0;
wire   [31:0] grp_dnn3_float_float_dense3_config_s_fu_121_res_d0;
wire   [2:0] grp_dnn3_float_float_dense3_config_s_fu_121_res_address1;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_res_ce1;
wire    grp_dnn3_float_float_dense3_config_s_fu_121_res_we1;
wire   [31:0] grp_dnn3_float_float_dense3_config_s_fu_121_res_d1;
reg   [3:0] i_0_reg_76;
wire   [0:0] icmp_ln390_fu_138_p2;
reg   [3:0] rows_0_reg_87;
reg   [10:0] phi_mul_reg_98;
reg   [7:0] cols_0_reg_110;
wire    ap_CS_fsm_state10;
reg    grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln391_fu_150_p1;
wire   [63:0] zext_ln397_fu_173_p1;
wire   [63:0] zext_ln397_2_fu_200_p1;
wire    ap_CS_fsm_state6;
wire   [10:0] zext_ln397_1_fu_190_p1;
wire   [10:0] add_ln397_fu_194_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg = 1'b0;
end

jedi_dnn3_float_float_dense3_config_s_O_sum #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
O_sum_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(O_sum_address0),
    .ce0(O_sum_ce0),
    .we0(O_sum_we0),
    .d0(O_sum_d0),
    .q0(O_sum_q0),
    .address1(grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address1),
    .ce1(O_sum_ce1),
    .q1(O_sum_q1)
);

dnn3_float_float_dense3_config_s grp_dnn3_float_float_dense3_config_s_fu_121(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dnn3_float_float_dense3_config_s_fu_121_ap_start),
    .ap_done(grp_dnn3_float_float_dense3_config_s_fu_121_ap_done),
    .ap_idle(grp_dnn3_float_float_dense3_config_s_fu_121_ap_idle),
    .ap_ready(grp_dnn3_float_float_dense3_config_s_fu_121_ap_ready),
    .input_r_address0(grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address0),
    .input_r_ce0(grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce0),
    .input_r_q0(O_sum_q0),
    .input_r_address1(grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address1),
    .input_r_ce1(grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce1),
    .input_r_q1(O_sum_q1),
    .res_address0(grp_dnn3_float_float_dense3_config_s_fu_121_res_address0),
    .res_ce0(grp_dnn3_float_float_dense3_config_s_fu_121_res_ce0),
    .res_we0(grp_dnn3_float_float_dense3_config_s_fu_121_res_we0),
    .res_d0(grp_dnn3_float_float_dense3_config_s_fu_121_res_d0),
    .res_address1(grp_dnn3_float_float_dense3_config_s_fu_121_res_address1),
    .res_ce1(grp_dnn3_float_float_dense3_config_s_fu_121_res_ce1),
    .res_we1(grp_dnn3_float_float_dense3_config_s_fu_121_res_we1),
    .res_d1(grp_dnn3_float_float_dense3_config_s_fu_121_res_d1)
);

jedi_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
jedi_fadd_32ns_32ns_32_4_full_dsp_1_U4578(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(O_sum_load_reg_249),
    .din1(O_load_reg_244),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln395_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg <= 1'b1;
        end else if ((grp_dnn3_float_float_dense3_config_s_fu_121_ap_ready == 1'b1)) begin
            grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        cols_0_reg_110 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cols_0_reg_110 <= cols_reg_234;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln390_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_76 <= i_fu_144_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_76 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln390_fu_138_p2 == 1'd1))) begin
        phi_mul_reg_98 <= 11'd0;
    end else if (((icmp_ln396_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_98 <= add_ln395_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln390_fu_138_p2 == 1'd1))) begin
        rows_0_reg_87 <= 4'd0;
    end else if (((icmp_ln396_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        rows_0_reg_87 <= rows_reg_221;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        O_load_reg_244 <= O_q0;
        O_sum_load_reg_249 <= O_sum_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln395_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        O_sum_addr_1_reg_226 <= zext_ln397_fu_173_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln395_reg_213 <= add_ln395_fu_155_p2;
        rows_reg_221 <= rows_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cols_reg_234 <= cols_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_reg_254 <= grp_fu_134_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        O_ce0 = 1'b1;
    end else begin
        O_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        O_sum_address0 = O_sum_addr_1_reg_226;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        O_sum_address0 = zext_ln391_fu_150_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        O_sum_address0 = grp_dnn3_float_float_dense3_config_s_fu_121_input_r_address0;
    end else begin
        O_sum_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        O_sum_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        O_sum_ce0 = grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce0;
    end else begin
        O_sum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        O_sum_ce1 = grp_dnn3_float_float_dense3_config_s_fu_121_input_r_ce1;
    end else begin
        O_sum_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        O_sum_d0 = tmp_reg_254;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        O_sum_d0 = 32'd0;
    end else begin
        O_sum_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((icmp_ln390_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        O_sum_we0 = 1'b1;
    end else begin
        O_sum_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (grp_dnn3_float_float_dense3_config_s_fu_121_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (grp_dnn3_float_float_dense3_config_s_fu_121_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln390_fu_138_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln395_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln396_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_dnn3_float_float_dense3_config_s_fu_121_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign O_address0 = zext_ln397_2_fu_200_p1;

assign add_ln395_fu_155_p2 = (phi_mul_reg_98 + 11'd150);

assign add_ln397_fu_194_p2 = (phi_mul_reg_98 + zext_ln397_1_fu_190_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cols_fu_184_p2 = (cols_0_reg_110 + 8'd1);

assign grp_dnn3_float_float_dense3_config_s_fu_121_ap_start = grp_dnn3_float_float_dense3_config_s_fu_121_ap_start_reg;

assign i_fu_144_p2 = (i_0_reg_76 + 4'd1);

assign icmp_ln390_fu_138_p2 = ((i_0_reg_76 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln395_fu_161_p2 = ((rows_0_reg_87 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln396_fu_178_p2 = ((cols_0_reg_110 == 8'd150) ? 1'b1 : 1'b0);

assign res_address0 = grp_dnn3_float_float_dense3_config_s_fu_121_res_address0;

assign res_address1 = grp_dnn3_float_float_dense3_config_s_fu_121_res_address1;

assign res_ce0 = grp_dnn3_float_float_dense3_config_s_fu_121_res_ce0;

assign res_ce1 = grp_dnn3_float_float_dense3_config_s_fu_121_res_ce1;

assign res_d0 = grp_dnn3_float_float_dense3_config_s_fu_121_res_d0;

assign res_d1 = grp_dnn3_float_float_dense3_config_s_fu_121_res_d1;

assign res_we0 = grp_dnn3_float_float_dense3_config_s_fu_121_res_we0;

assign res_we1 = grp_dnn3_float_float_dense3_config_s_fu_121_res_we1;

assign rows_fu_167_p2 = (rows_0_reg_87 + 4'd1);

assign zext_ln391_fu_150_p1 = i_0_reg_76;

assign zext_ln397_1_fu_190_p1 = cols_0_reg_110;

assign zext_ln397_2_fu_200_p1 = add_ln397_fu_194_p2;

assign zext_ln397_fu_173_p1 = rows_0_reg_87;

endmodule //jedi_dnn3_float_float_dense3_config_s
