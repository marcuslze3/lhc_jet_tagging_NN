// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module jedi_concat_float_float_concat_2_struct_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data1_address0,
        data1_ce0,
        data1_q0,
        data2_address0,
        data2_ce0,
        data2_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] data1_address0;
output   data1_ce0;
input  [31:0] data1_q0;
output  [10:0] data2_address0;
output   data2_ce0;
input  [31:0] data2_q0;
output  [11:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data1_ce0;
reg data2_ce0;
reg[11:0] res_address0;
reg res_ce0;
reg res_we0;
reg[31:0] res_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] add_ln78_fu_165_p2;
reg   [11:0] add_ln78_reg_286;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_177_p2;
reg   [4:0] i_reg_294;
wire   [7:0] j_fu_189_p2;
reg   [7:0] j_reg_302;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln80_1_fu_205_p1;
reg   [63:0] zext_ln80_1_reg_307;
wire   [0:0] icmp_ln79_fu_183_p2;
wire   [10:0] add_ln87_fu_210_p2;
reg   [10:0] add_ln87_reg_317;
wire    ap_CS_fsm_state5;
wire   [3:0] i_1_fu_222_p2;
reg   [3:0] i_1_reg_325;
wire   [12:0] mul_ln89_fu_240_p2;
reg   [12:0] mul_ln89_reg_330;
wire   [0:0] icmp_ln87_fu_216_p2;
wire   [7:0] j_1_fu_252_p2;
reg   [7:0] j_1_reg_338;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln88_fu_246_p2;
wire   [12:0] add_ln89_1_fu_277_p2;
reg   [12:0] add_ln89_1_reg_348;
reg   [4:0] i_0_reg_97;
reg   [11:0] phi_mul_reg_108;
reg   [7:0] j_0_reg_120;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln78_fu_171_p2;
reg   [3:0] i1_0_reg_131;
reg   [10:0] phi_mul1_reg_142;
reg   [7:0] j2_0_reg_154;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln89_3_fu_272_p1;
wire  signed [63:0] sext_ln89_fu_282_p1;
wire   [11:0] zext_ln80_fu_195_p1;
wire   [11:0] add_ln80_fu_199_p2;
wire   [4:0] or_ln_fu_228_p3;
wire   [4:0] mul_ln89_fu_240_p0;
wire   [10:0] zext_ln89_2_fu_262_p1;
wire   [10:0] add_ln89_fu_266_p2;
wire   [12:0] zext_ln89_1_fu_258_p1;
reg   [6:0] ap_NS_fsm;
wire   [12:0] mul_ln89_fu_240_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln78_fu_171_p2 == 1'd1))) begin
        i1_0_reg_131 <= 4'd0;
    end else if (((icmp_ln88_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i1_0_reg_131 <= i_1_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_97 <= i_reg_294;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_97 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j2_0_reg_154 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j2_0_reg_154 <= j_1_reg_338;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_120 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_120 <= j_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln78_fu_171_p2 == 1'd1))) begin
        phi_mul1_reg_142 <= 11'd0;
    end else if (((icmp_ln88_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul1_reg_142 <= add_ln87_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_108 <= add_ln78_reg_286;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_108 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln78_reg_286 <= add_ln78_fu_165_p2;
        i_reg_294 <= i_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln87_reg_317 <= add_ln87_fu_210_p2;
        i_1_reg_325 <= i_1_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln89_1_reg_348 <= add_ln89_1_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_338 <= j_1_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_302 <= j_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln89_reg_330[12 : 1] <= mul_ln89_fu_240_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln80_1_reg_307[11 : 0] <= zext_ln80_1_fu_205_p1[11 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln87_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data1_ce0 = 1'b1;
    end else begin
        data1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data2_ce0 = 1'b1;
    end else begin
        data2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        res_address0 = sext_ln89_fu_282_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_address0 = zext_ln80_1_reg_307;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        res_d0 = data2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_d0 = data1_q0;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln78_fu_171_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln79_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln87_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln88_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_165_p2 = (phi_mul_reg_108 + 12'd150);

assign add_ln80_fu_199_p2 = (phi_mul_reg_108 + zext_ln80_fu_195_p1);

assign add_ln87_fu_210_p2 = (phi_mul1_reg_142 + 11'd150);

assign add_ln89_1_fu_277_p2 = (mul_ln89_reg_330 + zext_ln89_1_fu_258_p1);

assign add_ln89_fu_266_p2 = (phi_mul1_reg_142 + zext_ln89_2_fu_262_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign data1_address0 = zext_ln80_1_fu_205_p1;

assign data2_address0 = zext_ln89_3_fu_272_p1;

assign i_1_fu_222_p2 = (i1_0_reg_131 + 4'd1);

assign i_fu_177_p2 = (i_0_reg_97 + 5'd1);

assign icmp_ln78_fu_171_p2 = ((i_0_reg_97 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_183_p2 = ((j_0_reg_120 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_216_p2 = ((i1_0_reg_131 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_246_p2 = ((j2_0_reg_154 == 8'd150) ? 1'b1 : 1'b0);

assign j_1_fu_252_p2 = (j2_0_reg_154 + 8'd1);

assign j_fu_189_p2 = (j_0_reg_120 + 8'd1);

assign mul_ln89_fu_240_p0 = mul_ln89_fu_240_p00;

assign mul_ln89_fu_240_p00 = or_ln_fu_228_p3;

assign mul_ln89_fu_240_p2 = (mul_ln89_fu_240_p0 * $signed('h96));

assign or_ln_fu_228_p3 = {{1'd1}, {i1_0_reg_131}};

assign sext_ln89_fu_282_p1 = $signed(add_ln89_1_reg_348);

assign zext_ln80_1_fu_205_p1 = add_ln80_fu_199_p2;

assign zext_ln80_fu_195_p1 = j_0_reg_120;

assign zext_ln89_1_fu_258_p1 = j2_0_reg_154;

assign zext_ln89_2_fu_262_p1 = j2_0_reg_154;

assign zext_ln89_3_fu_272_p1 = add_ln89_fu_266_p2;

always @ (posedge ap_clk) begin
    zext_ln80_1_reg_307[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    mul_ln89_reg_330[0] <= 1'b0;
end

endmodule //jedi_concat_float_float_concat_2_struct_s
