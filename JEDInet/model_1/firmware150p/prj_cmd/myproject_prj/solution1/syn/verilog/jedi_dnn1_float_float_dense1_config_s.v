// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module jedi_dnn1_float_float_dense1_config_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        B_address0,
        B_ce0,
        B_q0,
        E_address0,
        E_ce0,
        E_we0,
        E_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [17:0] E_address0;
output   E_ce0;
output   E_we0;
output  [31:0] E_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg B_ce0;
reg E_ce0;
reg E_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] cols_fu_184_p2;
reg   [14:0] cols_reg_266;
wire    ap_CS_fsm_state2;
wire   [19:0] zext_ln292_fu_190_p1;
reg   [19:0] zext_ln292_reg_271;
wire   [0:0] icmp_ln289_fu_178_p2;
wire   [17:0] zext_ln292_1_fu_194_p1;
reg   [17:0] zext_ln292_1_reg_276;
wire   [5:0] rows_fu_204_p2;
reg   [5:0] rows_reg_284;
wire    ap_CS_fsm_state3;
wire   [19:0] add_ln293_1_fu_210_p2;
reg   [19:0] add_ln293_1_reg_289;
wire   [0:0] icmp_ln292_fu_198_p2;
wire   [3:0] rows_2_fu_237_p2;
reg   [3:0] rows_2_reg_302;
wire    ap_CS_fsm_state8;
wire   [17:0] add_ln319_1_fu_248_p2;
reg   [17:0] add_ln319_1_reg_307;
wire   [0:0] icmp_ln318_fu_231_p2;
wire   [17:0] add_ln319_fu_254_p2;
reg   [17:0] add_ln319_reg_312;
reg   [4:0] cache1_address0;
reg    cache1_ce0;
reg    cache1_we0;
wire   [31:0] cache1_q0;
reg    cache1_ce1;
wire   [31:0] cache1_q1;
reg   [3:0] E_col_address0;
reg    E_col_ce0;
reg    E_col_we0;
wire   [31:0] E_col_q0;
reg    E_col_ce1;
reg    E_col_we1;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_ap_start;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_ap_done;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_ap_idle;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_ap_ready;
wire   [4:0] grp_dnn1_float_float_dense1_config_s_fu_166_input_r_address0;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_input_r_ce0;
wire   [4:0] grp_dnn1_float_float_dense1_config_s_fu_166_input_r_address1;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_input_r_ce1;
wire   [3:0] grp_dnn1_float_float_dense1_config_s_fu_166_res_address0;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_res_ce0;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_res_we0;
wire   [31:0] grp_dnn1_float_float_dense1_config_s_fu_166_res_d0;
wire   [3:0] grp_dnn1_float_float_dense1_config_s_fu_166_res_address1;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_res_ce1;
wire    grp_dnn1_float_float_dense1_config_s_fu_166_res_we1;
wire   [31:0] grp_dnn1_float_float_dense1_config_s_fu_166_res_d1;
reg   [14:0] cols_0_reg_110;
reg   [5:0] rows_0_reg_121;
wire    ap_CS_fsm_state6;
reg   [19:0] phi_mul_reg_133;
reg   [3:0] rows1_0_reg_144;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [17:0] phi_mul1_reg_155;
reg    grp_dnn1_float_float_dense1_config_s_fu_166_ap_start_reg;
wire   [63:0] zext_ln293_1_fu_221_p1;
wire   [63:0] zext_ln293_fu_226_p1;
wire   [63:0] zext_ln319_fu_243_p1;
wire   [63:0] zext_ln319_1_fu_259_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [19:0] add_ln293_fu_216_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_dnn1_float_float_dense1_config_s_fu_166_ap_start_reg = 1'b0;
end

jedi_dnn1_float_float_dense1_config_s_cache1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
cache1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cache1_address0),
    .ce0(cache1_ce0),
    .we0(cache1_we0),
    .d0(B_q0),
    .q0(cache1_q0),
    .address1(grp_dnn1_float_float_dense1_config_s_fu_166_input_r_address1),
    .ce1(cache1_ce1),
    .q1(cache1_q1)
);

jedi_dnn1_float_float_dense1_config_s_E_col #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
E_col_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(E_col_address0),
    .ce0(E_col_ce0),
    .we0(E_col_we0),
    .d0(grp_dnn1_float_float_dense1_config_s_fu_166_res_d0),
    .q0(E_col_q0),
    .address1(grp_dnn1_float_float_dense1_config_s_fu_166_res_address1),
    .ce1(E_col_ce1),
    .we1(E_col_we1),
    .d1(grp_dnn1_float_float_dense1_config_s_fu_166_res_d1)
);

dnn1_float_float_dense1_config_s grp_dnn1_float_float_dense1_config_s_fu_166(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dnn1_float_float_dense1_config_s_fu_166_ap_start),
    .ap_done(grp_dnn1_float_float_dense1_config_s_fu_166_ap_done),
    .ap_idle(grp_dnn1_float_float_dense1_config_s_fu_166_ap_idle),
    .ap_ready(grp_dnn1_float_float_dense1_config_s_fu_166_ap_ready),
    .input_r_address0(grp_dnn1_float_float_dense1_config_s_fu_166_input_r_address0),
    .input_r_ce0(grp_dnn1_float_float_dense1_config_s_fu_166_input_r_ce0),
    .input_r_q0(cache1_q0),
    .input_r_address1(grp_dnn1_float_float_dense1_config_s_fu_166_input_r_address1),
    .input_r_ce1(grp_dnn1_float_float_dense1_config_s_fu_166_input_r_ce1),
    .input_r_q1(cache1_q1),
    .res_address0(grp_dnn1_float_float_dense1_config_s_fu_166_res_address0),
    .res_ce0(grp_dnn1_float_float_dense1_config_s_fu_166_res_ce0),
    .res_we0(grp_dnn1_float_float_dense1_config_s_fu_166_res_we0),
    .res_d0(grp_dnn1_float_float_dense1_config_s_fu_166_res_d0),
    .res_address1(grp_dnn1_float_float_dense1_config_s_fu_166_res_address1),
    .res_ce1(grp_dnn1_float_float_dense1_config_s_fu_166_res_ce1),
    .res_we1(grp_dnn1_float_float_dense1_config_s_fu_166_res_we1),
    .res_d1(grp_dnn1_float_float_dense1_config_s_fu_166_res_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dnn1_float_float_dense1_config_s_fu_166_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln292_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_dnn1_float_float_dense1_config_s_fu_166_ap_start_reg <= 1'b1;
        end else if ((grp_dnn1_float_float_dense1_config_s_fu_166_ap_ready == 1'b1)) begin
            grp_dnn1_float_float_dense1_config_s_fu_166_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln318_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        cols_0_reg_110 <= cols_reg_266;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cols_0_reg_110 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul1_reg_155 <= add_ln319_1_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_dnn1_float_float_dense1_config_s_fu_166_ap_done == 1'b1))) begin
        phi_mul1_reg_155 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_133 <= 20'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_mul_reg_133 <= add_ln293_1_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        rows1_0_reg_144 <= rows_2_reg_302;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_dnn1_float_float_dense1_config_s_fu_166_ap_done == 1'b1))) begin
        rows1_0_reg_144 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        rows_0_reg_121 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rows_0_reg_121 <= rows_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln292_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln293_1_reg_289 <= add_ln293_1_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln318_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln319_1_reg_307 <= add_ln319_1_fu_248_p2;
        add_ln319_reg_312 <= add_ln319_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cols_reg_266 <= cols_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rows_2_reg_302 <= rows_2_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rows_reg_284 <= rows_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln289_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln292_1_reg_276[14 : 0] <= zext_ln292_1_fu_194_p1[14 : 0];
        zext_ln292_reg_271[14 : 0] <= zext_ln292_fu_190_p1[14 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        E_ce0 = 1'b1;
    end else begin
        E_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        E_col_address0 = zext_ln319_fu_243_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        E_col_address0 = grp_dnn1_float_float_dense1_config_s_fu_166_res_address0;
    end else begin
        E_col_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        E_col_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        E_col_ce0 = grp_dnn1_float_float_dense1_config_s_fu_166_res_ce0;
    end else begin
        E_col_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        E_col_ce1 = grp_dnn1_float_float_dense1_config_s_fu_166_res_ce1;
    end else begin
        E_col_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        E_col_we0 = grp_dnn1_float_float_dense1_config_s_fu_166_res_we0;
    end else begin
        E_col_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        E_col_we1 = grp_dnn1_float_float_dense1_config_s_fu_166_res_we1;
    end else begin
        E_col_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        E_we0 = 1'b1;
    end else begin
        E_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln289_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln289_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cache1_address0 = zext_ln293_fu_226_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cache1_address0 = grp_dnn1_float_float_dense1_config_s_fu_166_input_r_address0;
    end else begin
        cache1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cache1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        cache1_ce0 = grp_dnn1_float_float_dense1_config_s_fu_166_input_r_ce0;
    end else begin
        cache1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cache1_ce1 = grp_dnn1_float_float_dense1_config_s_fu_166_input_r_ce1;
    end else begin
        cache1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cache1_we0 = 1'b1;
    end else begin
        cache1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln289_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln292_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_dnn1_float_float_dense1_config_s_fu_166_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln318_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = zext_ln293_1_fu_221_p1;

assign E_address0 = zext_ln319_1_fu_259_p1;

assign E_d0 = E_col_q0;

assign add_ln293_1_fu_210_p2 = (phi_mul_reg_133 + 20'd22350);

assign add_ln293_fu_216_p2 = (zext_ln292_reg_271 + phi_mul_reg_133);

assign add_ln319_1_fu_248_p2 = (phi_mul1_reg_155 + 18'd22350);

assign add_ln319_fu_254_p2 = (zext_ln292_1_reg_276 + phi_mul1_reg_155);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cols_fu_184_p2 = (cols_0_reg_110 + 15'd1);

assign grp_dnn1_float_float_dense1_config_s_fu_166_ap_start = grp_dnn1_float_float_dense1_config_s_fu_166_ap_start_reg;

assign icmp_ln289_fu_178_p2 = ((cols_0_reg_110 == 15'd22350) ? 1'b1 : 1'b0);

assign icmp_ln292_fu_198_p2 = ((rows_0_reg_121 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln318_fu_231_p2 = ((rows1_0_reg_144 == 4'd10) ? 1'b1 : 1'b0);

assign rows_2_fu_237_p2 = (rows1_0_reg_144 + 4'd1);

assign rows_fu_204_p2 = (rows_0_reg_121 + 6'd1);

assign zext_ln292_1_fu_194_p1 = cols_0_reg_110;

assign zext_ln292_fu_190_p1 = cols_0_reg_110;

assign zext_ln293_1_fu_221_p1 = add_ln293_fu_216_p2;

assign zext_ln293_fu_226_p1 = rows_0_reg_121;

assign zext_ln319_1_fu_259_p1 = add_ln319_reg_312;

assign zext_ln319_fu_243_p1 = rows1_0_reg_144;

always @ (posedge ap_clk) begin
    zext_ln292_reg_271[19:15] <= 5'b00000;
    zext_ln292_1_reg_276[17:15] <= 3'b000;
end

endmodule //jedi_dnn1_float_float_dense1_config_s
