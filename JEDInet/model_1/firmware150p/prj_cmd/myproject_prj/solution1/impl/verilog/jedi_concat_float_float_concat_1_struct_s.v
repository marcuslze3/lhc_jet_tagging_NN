// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module jedi_concat_float_float_concat_1_struct_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data1_address0,
        data1_ce0,
        data1_q0,
        data2_address0,
        data2_ce0,
        data2_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [18:0] data1_address0;
output   data1_ce0;
input  [31:0] data1_q0;
output  [18:0] data2_address0;
output   data2_ce0;
input  [31:0] data2_q0;
output  [19:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data1_ce0;
reg data2_ce0;
reg[19:0] res_address0;
reg res_ce0;
reg res_we0;
reg[31:0] res_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [18:0] add_ln78_fu_149_p2;
reg   [18:0] add_ln78_reg_268;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_161_p2;
reg   [4:0] i_reg_276;
wire   [14:0] j_fu_173_p2;
reg   [14:0] j_reg_284;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln80_2_fu_189_p1;
reg   [63:0] zext_ln80_2_reg_289;
wire   [0:0] icmp_ln79_fu_167_p2;
wire    ap_CS_fsm_state4;
wire   [18:0] add_ln87_fu_194_p2;
reg   [18:0] add_ln87_reg_309;
wire    ap_CS_fsm_state6;
wire   [4:0] i_2_fu_206_p2;
reg   [4:0] i_2_reg_317;
wire   [19:0] mul_ln89_fu_262_p2;
reg   [19:0] mul_ln89_reg_322;
wire   [0:0] icmp_ln87_fu_200_p2;
wire   [14:0] j_2_fu_228_p2;
reg   [14:0] j_2_reg_330;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln88_fu_222_p2;
(* use_dsp48 = "no" *) wire   [19:0] add_ln89_2_fu_253_p2;
reg   [19:0] add_ln89_2_reg_340;
wire    ap_CS_fsm_state8;
reg   [4:0] i_0_reg_81;
reg   [18:0] phi_mul_reg_92;
reg   [14:0] j_0_reg_104;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln78_fu_155_p2;
reg   [4:0] i1_0_reg_115;
reg   [18:0] phi_mul1_reg_126;
reg   [14:0] j2_0_reg_138;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln89_6_fu_248_p1;
wire   [63:0] zext_ln89_7_fu_258_p1;
wire   [18:0] zext_ln80_fu_179_p1;
wire   [18:0] add_ln80_fu_183_p2;
wire   [4:0] xor_ln89_fu_212_p2;
wire   [18:0] zext_ln89_5_fu_238_p1;
wire   [18:0] add_ln89_fu_242_p2;
wire   [19:0] zext_ln89_4_fu_234_p1;
wire   [4:0] mul_ln89_fu_262_p0;
wire   [15:0] mul_ln89_fu_262_p1;
reg   [8:0] ap_NS_fsm;
wire   [19:0] mul_ln89_fu_262_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

jedi_mul_mul_5ns_16ns_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 20 ))
jedi_mul_mul_5ns_16ns_20_1_1_U13(
    .din0(mul_ln89_fu_262_p0),
    .din1(mul_ln89_fu_262_p1),
    .dout(mul_ln89_fu_262_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln78_fu_155_p2 == 1'd1))) begin
        i1_0_reg_115 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln88_fu_222_p2 == 1'd1))) begin
        i1_0_reg_115 <= i_2_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_81 <= i_reg_276;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_81 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j2_0_reg_138 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j2_0_reg_138 <= j_2_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_104 <= 15'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_104 <= j_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln78_fu_155_p2 == 1'd1))) begin
        phi_mul1_reg_126 <= 19'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln88_fu_222_p2 == 1'd1))) begin
        phi_mul1_reg_126 <= add_ln87_reg_309;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_92 <= add_ln78_reg_268;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_92 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln78_reg_268 <= add_ln78_fu_149_p2;
        i_reg_276 <= i_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln87_reg_309 <= add_ln87_fu_194_p2;
        i_2_reg_317 <= i_2_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln89_2_reg_340 <= add_ln89_2_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_330 <= j_2_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_284 <= j_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        mul_ln89_reg_322 <= mul_ln89_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln80_2_reg_289[18 : 0] <= zext_ln80_2_fu_189_p1[18 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln87_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data1_ce0 = 1'b1;
    end else begin
        data1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data2_ce0 = 1'b1;
    end else begin
        data2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        res_address0 = zext_ln89_7_fu_258_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_address0 = zext_ln80_2_reg_289;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        res_d0 = data2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        res_d0 = data1_q0;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln78_fu_155_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln79_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln87_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln88_fu_222_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_149_p2 = (phi_mul_reg_92 + 19'd22350);

assign add_ln80_fu_183_p2 = (phi_mul_reg_92 + zext_ln80_fu_179_p1);

assign add_ln87_fu_194_p2 = (phi_mul1_reg_126 + 19'd22350);

assign add_ln89_2_fu_253_p2 = (mul_ln89_reg_322 + zext_ln89_4_fu_234_p1);

assign add_ln89_fu_242_p2 = (phi_mul1_reg_126 + zext_ln89_5_fu_238_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data1_address0 = zext_ln80_2_fu_189_p1;

assign data2_address0 = zext_ln89_6_fu_248_p1;

assign i_2_fu_206_p2 = (i1_0_reg_115 + 5'd1);

assign i_fu_161_p2 = (i_0_reg_81 + 5'd1);

assign icmp_ln78_fu_155_p2 = ((i_0_reg_81 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_167_p2 = ((j_0_reg_104 == 15'd22350) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_200_p2 = ((i1_0_reg_115 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_222_p2 = ((j2_0_reg_138 == 15'd22350) ? 1'b1 : 1'b0);

assign j_2_fu_228_p2 = (j2_0_reg_138 + 15'd1);

assign j_fu_173_p2 = (j_0_reg_104 + 15'd1);

assign mul_ln89_fu_262_p0 = mul_ln89_fu_262_p00;

assign mul_ln89_fu_262_p00 = xor_ln89_fu_212_p2;

assign mul_ln89_fu_262_p1 = 20'd22350;

assign xor_ln89_fu_212_p2 = (i1_0_reg_115 ^ 5'd16);

assign zext_ln80_2_fu_189_p1 = add_ln80_fu_183_p2;

assign zext_ln80_fu_179_p1 = j_0_reg_104;

assign zext_ln89_4_fu_234_p1 = j2_0_reg_138;

assign zext_ln89_5_fu_238_p1 = j2_0_reg_138;

assign zext_ln89_6_fu_248_p1 = add_ln89_fu_242_p2;

assign zext_ln89_7_fu_258_p1 = add_ln89_2_reg_340;

always @ (posedge ap_clk) begin
    zext_ln80_2_reg_289[63:19] <= 45'b000000000000000000000000000000000000000000000;
end

endmodule //jedi_concat_float_float_concat_1_struct_s
