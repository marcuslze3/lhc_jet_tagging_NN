-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jedi_multiply_float_float_mult_1_struct_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    data1_ce0 : OUT STD_LOGIC;
    data1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    data2_ce0 : OUT STD_LOGIC;
    data2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of jedi_multiply_float_float_mult_1_struct_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv19_574E : STD_LOGIC_VECTOR (18 downto 0) := "0000101011101001110";
    constant ap_const_lv12_96 : STD_LOGIC_VECTOR (11 downto 0) := "000010010110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv15_574E : STD_LOGIC_VECTOR (14 downto 0) := "101011101001110";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv22_574E : STD_LOGIC_VECTOR (21 downto 0) := "0000000101011101001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln50_fu_184_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_reg_281 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln50_5_fu_190_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln50_5_reg_286 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_202_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_294 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_214_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_reg_302 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln57_fu_220_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln57_reg_307 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln56_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_addr_reg_312 : STD_LOGIC_VECTOR (18 downto 0);
    signal k_fu_245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_320 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln61_fu_255_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln61_reg_325 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln59_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_4_fu_261_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln61_4_reg_330 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal data1_load_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal data2_load_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_0_reg_94 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul1_reg_105 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul3_reg_117 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_0_reg_129 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln50_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_153 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_164 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln57_6_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_6_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_5_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln57_5_fu_224_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln57_fu_228_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln61_fu_251_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln61_3_fu_267_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component jedi_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jedi_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    jedi_fadd_32ns_32ns_32_4_full_dsp_1_U1 : component jedi_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => storemerge_reg_140,
        din1 => tmp_reg_355,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    jedi_fmul_32ns_32ns_32_3_max_dsp_1_U2 : component jedi_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data1_load_reg_345,
        din1 => data2_load_reg_350,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_94 <= i_reg_294;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_94 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_129 <= j_reg_302;
            elsif (((icmp_ln50_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_129 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    k_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_0_reg_153 <= k_reg_320;
            elsif (((icmp_ln56_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_153 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_105 <= add_ln50_5_reg_286;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_105 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul3_reg_117 <= add_ln50_reg_281;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul3_reg_117 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                phi_mul_reg_164 <= add_ln61_4_reg_330;
            elsif (((icmp_ln56_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_164 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    storemerge_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                storemerge_reg_140 <= grp_fu_175_p2;
            elsif (((icmp_ln56_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                storemerge_reg_140 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln50_5_reg_286 <= add_ln50_5_fu_190_p2;
                add_ln50_reg_281 <= add_ln50_fu_184_p2;
                i_reg_294 <= i_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln61_4_reg_330 <= add_ln61_4_fu_261_p2;
                add_ln61_reg_325 <= add_ln61_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                data1_load_reg_345 <= data1_q0;
                data2_load_reg_350 <= data2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_302 <= j_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_320 <= k_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                res_addr_reg_312 <= zext_ln57_6_fu_234_p1(19 - 1 downto 0);
                    zext_ln57_reg_307(14 downto 0) <= zext_ln57_fu_220_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_reg_355 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    zext_ln57_reg_307(21 downto 15) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln56_fu_208_p2, ap_CS_fsm_state4, icmp_ln59_fu_239_p2, icmp_ln50_fu_196_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_196_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln56_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln59_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln50_5_fu_190_p2 <= std_logic_vector(unsigned(phi_mul1_reg_105) + unsigned(ap_const_lv12_96));
    add_ln50_fu_184_p2 <= std_logic_vector(unsigned(phi_mul3_reg_117) + unsigned(ap_const_lv19_574E));
    add_ln57_fu_228_p2 <= std_logic_vector(unsigned(phi_mul3_reg_117) + unsigned(zext_ln57_5_fu_224_p1));
    add_ln61_3_fu_267_p2 <= std_logic_vector(unsigned(phi_mul_reg_164) + unsigned(zext_ln57_reg_307));
    add_ln61_4_fu_261_p2 <= std_logic_vector(unsigned(phi_mul_reg_164) + unsigned(ap_const_lv22_574E));
    add_ln61_fu_255_p2 <= std_logic_vector(unsigned(phi_mul1_reg_105) + unsigned(zext_ln61_fu_251_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln50_fu_196_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_196_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln50_fu_196_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln50_fu_196_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data1_address0 <= zext_ln61_5_fu_277_p1(15 - 1 downto 0);

    data1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data1_ce0 <= ap_const_logic_1;
        else 
            data1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data2_address0 <= zext_ln61_6_fu_272_p1(22 - 1 downto 0);

    data2_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data2_ce0 <= ap_const_logic_1;
        else 
            data2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_202_p2 <= std_logic_vector(unsigned(i_0_reg_94) + unsigned(ap_const_lv5_1));
    icmp_ln50_fu_196_p2 <= "1" when (i_0_reg_94 = ap_const_lv5_10) else "0";
    icmp_ln56_fu_208_p2 <= "1" when (j_0_reg_129 = ap_const_lv15_574E) else "0";
    icmp_ln59_fu_239_p2 <= "1" when (k_0_reg_153 = ap_const_lv8_96) else "0";
    j_fu_214_p2 <= std_logic_vector(unsigned(j_0_reg_129) + unsigned(ap_const_lv15_1));
    k_fu_245_p2 <= std_logic_vector(unsigned(k_0_reg_153) + unsigned(ap_const_lv8_1));
    res_address0 <= res_addr_reg_312;

    res_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= storemerge_reg_140;

    res_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln57_5_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_129),19));
    zext_ln57_6_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_228_p2),64));
    zext_ln57_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_129),22));
    zext_ln61_5_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_reg_325),64));
    zext_ln61_6_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_3_fu_267_p2),64));
    zext_ln61_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_153),12));
end behav;
