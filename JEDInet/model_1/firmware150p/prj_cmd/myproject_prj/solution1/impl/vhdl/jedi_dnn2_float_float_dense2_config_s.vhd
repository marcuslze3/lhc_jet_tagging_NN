-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jedi_dnn2_float_float_dense2_config_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    O_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    O_ce0 : OUT STD_LOGIC;
    O_we0 : OUT STD_LOGIC;
    O_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of jedi_dnn2_float_float_dense2_config_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_96 : STD_LOGIC_VECTOR (11 downto 0) := "000010010110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_96 : STD_LOGIC_VECTOR (10 downto 0) := "00010010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cols_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cols_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln361_fu_190_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln361_reg_271 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln360_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln361_1_fu_194_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln361_1_reg_276 : STD_LOGIC_VECTOR (10 downto 0);
    signal rows_fu_204_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal rows_reg_284 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln362_1_fu_210_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln362_1_reg_289 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln361_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_1_fu_237_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rows_1_reg_302 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln370_1_fu_248_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln370_1_reg_307 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln369_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln370_fu_254_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln370_reg_312 : STD_LOGIC_VECTOR (10 downto 0);
    signal cache2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal cache2_ce0 : STD_LOGIC;
    signal cache2_we0 : STD_LOGIC;
    signal cache2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cache2_ce1 : STD_LOGIC;
    signal cache2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal O_col_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_col_ce0 : STD_LOGIC;
    signal O_col_we0 : STD_LOGIC;
    signal O_col_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal O_col_ce1 : STD_LOGIC;
    signal O_col_we1 : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_ap_start : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_ap_done : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_ap_idle : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_ap_ready : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_input_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce0 : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_input_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce1 : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_ce0 : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_we0 : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_ce1 : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_we1 : STD_LOGIC;
    signal grp_dnn2_float_float_dense2_config_s_fu_166_res_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_0_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal rows_0_reg_121 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_mul_reg_133 : STD_LOGIC_VECTOR (11 downto 0);
    signal rows1_0_reg_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal phi_mul1_reg_155 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_dnn2_float_float_dense2_config_s_fu_166_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln362_1_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln370_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln370_1_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln362_fu_216_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component dnn2_float_float_dense2_config_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res_ce1 : OUT STD_LOGIC;
        res_we1 : OUT STD_LOGIC;
        res_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jedi_dnn2_float_float_dense2_config_s_cache2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jedi_dnn1_float_float_dense1_config_s_E_col IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cache2_U : component jedi_dnn2_float_float_dense2_config_s_cache2
    generic map (
        DataWidth => 32,
        AddressRange => 26,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cache2_address0,
        ce0 => cache2_ce0,
        we0 => cache2_we0,
        d0 => C_q0,
        q0 => cache2_q0,
        address1 => grp_dnn2_float_float_dense2_config_s_fu_166_input_r_address1,
        ce1 => cache2_ce1,
        q1 => cache2_q1);

    O_col_U : component jedi_dnn1_float_float_dense1_config_s_E_col
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => O_col_address0,
        ce0 => O_col_ce0,
        we0 => O_col_we0,
        d0 => grp_dnn2_float_float_dense2_config_s_fu_166_res_d0,
        q0 => O_col_q0,
        address1 => grp_dnn2_float_float_dense2_config_s_fu_166_res_address1,
        ce1 => O_col_ce1,
        we1 => O_col_we1,
        d1 => grp_dnn2_float_float_dense2_config_s_fu_166_res_d1);

    grp_dnn2_float_float_dense2_config_s_fu_166 : component dnn2_float_float_dense2_config_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dnn2_float_float_dense2_config_s_fu_166_ap_start,
        ap_done => grp_dnn2_float_float_dense2_config_s_fu_166_ap_done,
        ap_idle => grp_dnn2_float_float_dense2_config_s_fu_166_ap_idle,
        ap_ready => grp_dnn2_float_float_dense2_config_s_fu_166_ap_ready,
        input_r_address0 => grp_dnn2_float_float_dense2_config_s_fu_166_input_r_address0,
        input_r_ce0 => grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce0,
        input_r_q0 => cache2_q0,
        input_r_address1 => grp_dnn2_float_float_dense2_config_s_fu_166_input_r_address1,
        input_r_ce1 => grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce1,
        input_r_q1 => cache2_q1,
        res_address0 => grp_dnn2_float_float_dense2_config_s_fu_166_res_address0,
        res_ce0 => grp_dnn2_float_float_dense2_config_s_fu_166_res_ce0,
        res_we0 => grp_dnn2_float_float_dense2_config_s_fu_166_res_we0,
        res_d0 => grp_dnn2_float_float_dense2_config_s_fu_166_res_d0,
        res_address1 => grp_dnn2_float_float_dense2_config_s_fu_166_res_address1,
        res_ce1 => grp_dnn2_float_float_dense2_config_s_fu_166_res_ce1,
        res_we1 => grp_dnn2_float_float_dense2_config_s_fu_166_res_we1,
        res_d1 => grp_dnn2_float_float_dense2_config_s_fu_166_res_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dnn2_float_float_dense2_config_s_fu_166_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dnn2_float_float_dense2_config_s_fu_166_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln361_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_dnn2_float_float_dense2_config_s_fu_166_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dnn2_float_float_dense2_config_s_fu_166_ap_ready = ap_const_logic_1)) then 
                    grp_dnn2_float_float_dense2_config_s_fu_166_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cols_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln369_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                cols_0_reg_110 <= cols_reg_266;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cols_0_reg_110 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul1_reg_155 <= add_ln370_1_reg_307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_dnn2_float_float_dense2_config_s_fu_166_ap_done = ap_const_logic_1))) then 
                phi_mul1_reg_155 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln360_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_133 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_133 <= add_ln362_1_reg_289;
            end if; 
        end if;
    end process;

    rows1_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                rows1_0_reg_144 <= rows_1_reg_302;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_dnn2_float_float_dense2_config_s_fu_166_ap_done = ap_const_logic_1))) then 
                rows1_0_reg_144 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    rows_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln360_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rows_0_reg_121 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                rows_0_reg_121 <= rows_reg_284;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln361_fu_198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln362_1_reg_289 <= add_ln362_1_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln369_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln370_1_reg_307 <= add_ln370_1_fu_248_p2;
                add_ln370_reg_312 <= add_ln370_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cols_reg_266 <= cols_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                rows_1_reg_302 <= rows_1_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                rows_reg_284 <= rows_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln360_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln361_1_reg_276(7 downto 0) <= zext_ln361_1_fu_194_p1(7 downto 0);
                    zext_ln361_reg_271(7 downto 0) <= zext_ln361_fu_190_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln361_reg_271(11 downto 8) <= "0000";
    zext_ln361_1_reg_276(10 downto 8) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln360_fu_178_p2, ap_CS_fsm_state3, icmp_ln361_fu_198_p2, ap_CS_fsm_state6, icmp_ln369_fu_231_p2, grp_dnn2_float_float_dense2_config_s_fu_166_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln360_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln361_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_dnn2_float_float_dense2_config_s_fu_166_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln369_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    C_address0 <= zext_ln362_1_fu_221_p1(12 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    O_address0 <= zext_ln370_1_fu_259_p1(11 - 1 downto 0);

    O_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            O_ce0 <= ap_const_logic_1;
        else 
            O_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    O_col_address0_assign_proc : process(ap_CS_fsm_state6, grp_dnn2_float_float_dense2_config_s_fu_166_res_address0, ap_CS_fsm_state5, zext_ln370_fu_243_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            O_col_address0 <= zext_ln370_fu_243_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            O_col_address0 <= grp_dnn2_float_float_dense2_config_s_fu_166_res_address0;
        else 
            O_col_address0 <= "XXXX";
        end if; 
    end process;


    O_col_ce0_assign_proc : process(ap_CS_fsm_state6, grp_dnn2_float_float_dense2_config_s_fu_166_res_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            O_col_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            O_col_ce0 <= grp_dnn2_float_float_dense2_config_s_fu_166_res_ce0;
        else 
            O_col_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    O_col_ce1_assign_proc : process(grp_dnn2_float_float_dense2_config_s_fu_166_res_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            O_col_ce1 <= grp_dnn2_float_float_dense2_config_s_fu_166_res_ce1;
        else 
            O_col_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    O_col_we0_assign_proc : process(grp_dnn2_float_float_dense2_config_s_fu_166_res_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            O_col_we0 <= grp_dnn2_float_float_dense2_config_s_fu_166_res_we0;
        else 
            O_col_we0 <= ap_const_logic_0;
        end if; 
    end process;


    O_col_we1_assign_proc : process(grp_dnn2_float_float_dense2_config_s_fu_166_res_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            O_col_we1 <= grp_dnn2_float_float_dense2_config_s_fu_166_res_we1;
        else 
            O_col_we1 <= ap_const_logic_0;
        end if; 
    end process;

    O_d0 <= O_col_q0;

    O_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            O_we0 <= ap_const_logic_1;
        else 
            O_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln362_1_fu_210_p2 <= std_logic_vector(unsigned(phi_mul_reg_133) + unsigned(ap_const_lv12_96));
    add_ln362_fu_216_p2 <= std_logic_vector(unsigned(zext_ln361_reg_271) + unsigned(phi_mul_reg_133));
    add_ln370_1_fu_248_p2 <= std_logic_vector(unsigned(phi_mul1_reg_155) + unsigned(ap_const_lv11_96));
    add_ln370_fu_254_p2 <= std_logic_vector(unsigned(zext_ln361_1_reg_276) + unsigned(phi_mul1_reg_155));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln360_fu_178_p2)
    begin
        if ((((icmp_ln360_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln360_fu_178_p2)
    begin
        if (((icmp_ln360_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cache2_address0_assign_proc : process(grp_dnn2_float_float_dense2_config_s_fu_166_input_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln362_fu_226_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache2_address0 <= zext_ln362_fu_226_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache2_address0 <= grp_dnn2_float_float_dense2_config_s_fu_166_input_r_address0;
        else 
            cache2_address0 <= "XXXXX";
        end if; 
    end process;


    cache2_ce0_assign_proc : process(grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache2_ce0 <= grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce0;
        else 
            cache2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache2_ce1_assign_proc : process(grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cache2_ce1 <= grp_dnn2_float_float_dense2_config_s_fu_166_input_r_ce1;
        else 
            cache2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache2_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cache2_we0 <= ap_const_logic_1;
        else 
            cache2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cols_fu_184_p2 <= std_logic_vector(unsigned(cols_0_reg_110) + unsigned(ap_const_lv8_1));
    grp_dnn2_float_float_dense2_config_s_fu_166_ap_start <= grp_dnn2_float_float_dense2_config_s_fu_166_ap_start_reg;
    icmp_ln360_fu_178_p2 <= "1" when (cols_0_reg_110 = ap_const_lv8_96) else "0";
    icmp_ln361_fu_198_p2 <= "1" when (rows_0_reg_121 = ap_const_lv5_1A) else "0";
    icmp_ln369_fu_231_p2 <= "1" when (rows1_0_reg_144 = ap_const_lv4_A) else "0";
    rows_1_fu_237_p2 <= std_logic_vector(unsigned(rows1_0_reg_144) + unsigned(ap_const_lv4_1));
    rows_fu_204_p2 <= std_logic_vector(unsigned(rows_0_reg_121) + unsigned(ap_const_lv5_1));
    zext_ln361_1_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_0_reg_110),11));
    zext_ln361_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_0_reg_110),12));
    zext_ln362_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_fu_216_p2),64));
    zext_ln362_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_0_reg_121),64));
    zext_ln370_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln370_reg_312),64));
    zext_ln370_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows1_0_reg_144),64));
end behav;
