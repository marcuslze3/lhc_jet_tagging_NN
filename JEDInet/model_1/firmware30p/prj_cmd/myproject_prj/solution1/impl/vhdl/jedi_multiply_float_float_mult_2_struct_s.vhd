-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jedi_multiply_float_float_mult_2_struct_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data1_ce0 : OUT STD_LOGIC;
    data1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    data2_ce0 : OUT STD_LOGIC;
    data2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of jedi_multiply_float_float_mult_2_struct_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv14_366 : STD_LOGIC_VECTOR (13 downto 0) := "00001101100110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_366 : STD_LOGIC_VECTOR (9 downto 0) := "1101100110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv15_366 : STD_LOGIC_VECTOR (14 downto 0) := "000001101100110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln50_fu_170_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln50_reg_291 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln61_fu_212_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln61_reg_304 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln50_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_224_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_312 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln57_fu_230_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_reg_317 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln56_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_addr_reg_322 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_fu_255_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_330 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln59_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_2_fu_275_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln61_2_reg_340 : STD_LOGIC_VECTOR (14 downto 0);
    signal data1_load_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data2_load_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_0_reg_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul2_reg_103 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_115 : STD_LOGIC_VECTOR (9 downto 0);
    signal storemerge_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_139 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_150 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln57_2_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln61_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_3_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_1_fu_188_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_200_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln61_fu_196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln61_1_fu_208_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln57_1_fu_234_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln57_fu_238_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln61_2_fu_261_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln61_fu_265_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln61_1_fu_281_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component jedi_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jedi_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    jedi_fadd_32ns_32ns_32_4_full_dsp_1_U8 : component jedi_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => storemerge_reg_126,
        din1 => tmp_reg_360,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);

    jedi_fmul_32ns_32ns_32_3_max_dsp_1_U9 : component jedi_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data1_load_reg_350,
        din1 => data2_load_reg_355,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_92 <= i_reg_299;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_92 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_115 <= j_reg_312;
            elsif (((icmp_ln50_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_115 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_0_reg_139 <= k_reg_330;
            elsif (((icmp_ln56_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_139 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_103 <= add_ln50_reg_291;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_103 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_mul_reg_150 <= add_ln61_2_reg_340;
            elsif (((icmp_ln56_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_150 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    storemerge_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                storemerge_reg_126 <= grp_fu_161_p2;
            elsif (((icmp_ln56_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                storemerge_reg_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln50_reg_291 <= add_ln50_fu_170_p2;
                i_reg_299 <= i_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln61_2_reg_340 <= add_ln61_2_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                data1_load_reg_350 <= data1_q0;
                data2_load_reg_355 <= data2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_312 <= j_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_330 <= k_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                res_addr_reg_322 <= zext_ln57_2_fu_244_p1(14 - 1 downto 0);
                    zext_ln57_reg_317(9 downto 0) <= zext_ln57_fu_230_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln61_reg_304(10 downto 1) <= sub_ln61_fu_212_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_reg_360 <= grp_fu_166_p2;
            end if;
        end if;
    end process;
    sub_ln61_reg_304(0) <= '0';
    zext_ln57_reg_317(14 downto 10) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln50_fu_176_p2, ap_CS_fsm_state3, icmp_ln56_fu_218_p2, ap_CS_fsm_state4, icmp_ln59_fu_249_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln50_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln56_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln59_fu_249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln50_fu_170_p2 <= std_logic_vector(unsigned(phi_mul2_reg_103) + unsigned(ap_const_lv14_366));
    add_ln57_fu_238_p2 <= std_logic_vector(unsigned(phi_mul2_reg_103) + unsigned(zext_ln57_1_fu_234_p1));
    add_ln61_1_fu_281_p2 <= std_logic_vector(unsigned(phi_mul_reg_150) + unsigned(zext_ln57_reg_317));
    add_ln61_2_fu_275_p2 <= std_logic_vector(unsigned(phi_mul_reg_150) + unsigned(ap_const_lv15_366));
    add_ln61_fu_265_p2 <= std_logic_vector(unsigned(sub_ln61_reg_304) + unsigned(zext_ln61_2_fu_261_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln50_fu_176_p2)
    begin
        if ((((icmp_ln50_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln50_fu_176_p2)
    begin
        if (((icmp_ln50_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data1_address0 <= sext_ln61_fu_270_p1(10 - 1 downto 0);

    data1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data1_ce0 <= ap_const_logic_1;
        else 
            data1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data2_address0 <= zext_ln61_3_fu_286_p1(15 - 1 downto 0);

    data2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data2_ce0 <= ap_const_logic_1;
        else 
            data2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_182_p2 <= std_logic_vector(unsigned(i_0_reg_92) + unsigned(ap_const_lv5_1));
    icmp_ln50_fu_176_p2 <= "1" when (i_0_reg_92 = ap_const_lv5_10) else "0";
    icmp_ln56_fu_218_p2 <= "1" when (j_0_reg_115 = ap_const_lv10_366) else "0";
    icmp_ln59_fu_249_p2 <= "1" when (k_0_reg_139 = ap_const_lv5_1E) else "0";
    j_fu_224_p2 <= std_logic_vector(unsigned(j_0_reg_115) + unsigned(ap_const_lv10_1));
    k_fu_255_p2 <= std_logic_vector(unsigned(k_0_reg_139) + unsigned(ap_const_lv5_1));
    res_address0 <= res_addr_reg_322;

    res_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= storemerge_reg_126;

    res_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln61_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln61_fu_265_p2),64));

    sub_ln61_fu_212_p2 <= std_logic_vector(unsigned(zext_ln61_fu_196_p1) - unsigned(zext_ln61_1_fu_208_p1));
    tmp_1_fu_188_p3 <= (i_0_reg_92 & ap_const_lv5_0);
    tmp_2_fu_200_p3 <= (i_0_reg_92 & ap_const_lv1_0);
    zext_ln57_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_115),14));
    zext_ln57_2_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_238_p2),64));
    zext_ln57_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_115),15));
    zext_ln61_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_200_p3),11));
    zext_ln61_2_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_139),11));
    zext_ln61_3_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_1_fu_281_p2),64));
    zext_ln61_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_188_p3),11));
end behav;
