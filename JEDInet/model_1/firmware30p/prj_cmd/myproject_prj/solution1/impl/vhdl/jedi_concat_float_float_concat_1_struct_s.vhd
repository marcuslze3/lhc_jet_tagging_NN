-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jedi_concat_float_float_concat_1_struct_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data1_ce0 : OUT STD_LOGIC;
    data1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data2_ce0 : OUT STD_LOGIC;
    data2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of jedi_concat_float_float_concat_1_struct_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv14_366 : STD_LOGIC_VECTOR (13 downto 0) := "00001101100110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_366 : STD_LOGIC_VECTOR (9 downto 0) := "1101100110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv15_366 : STD_LOGIC_VECTOR (14 downto 0) := "000001101100110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln78_fu_149_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln78_reg_268 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_161_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_173_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_284 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln80_1_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_1_reg_289 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln79_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_fu_194_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln87_reg_299 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_307 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln89_fu_262_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln89_reg_312 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln87_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_228_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_320 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln88_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_1_fu_253_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln89_1_fu_253_p2 : signal is "no";
    signal add_ln89_1_reg_330 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_reg_81 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_92 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_104 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln78_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul1_reg_126 : STD_LOGIC_VECTOR (13 downto 0);
    signal j2_0_reg_138 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln89_3_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_4_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_fu_179_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln80_fu_183_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln89_fu_212_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln89_2_fu_238_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln89_fu_242_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln89_1_fu_234_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln89_fu_262_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln89_fu_262_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln89_fu_262_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component jedi_mul_mul_5ns_11ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    jedi_mul_mul_5ns_11ns_15_1_1_U13 : component jedi_mul_mul_5ns_11ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln89_fu_262_p0,
        din1 => mul_ln89_fu_262_p1,
        dout => mul_ln89_fu_262_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln78_fu_155_p2 = ap_const_lv1_1))) then 
                i1_0_reg_115 <= ap_const_lv5_0;
            elsif (((icmp_ln88_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i1_0_reg_115 <= i_1_reg_307;
            end if; 
        end if;
    end process;

    i_0_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_81 <= i_reg_276;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_81 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j2_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_0_reg_138 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j2_0_reg_138 <= j_1_reg_320;
            end if; 
        end if;
    end process;

    j_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_104 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_104 <= j_reg_284;
            end if; 
        end if;
    end process;

    phi_mul1_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln78_fu_155_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_126 <= ap_const_lv14_0;
            elsif (((icmp_ln88_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul1_reg_126 <= add_ln87_reg_299;
            end if; 
        end if;
    end process;

    phi_mul_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_92 <= add_ln78_reg_268;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_92 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln78_reg_268 <= add_ln78_fu_149_p2;
                i_reg_276 <= i_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln87_reg_299 <= add_ln87_fu_194_p2;
                i_1_reg_307 <= i_1_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln88_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln89_1_reg_330 <= add_ln89_1_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_320 <= j_1_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_284 <= j_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln89_reg_312 <= mul_ln89_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln80_1_reg_289(13 downto 0) <= zext_ln80_1_fu_189_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln80_1_reg_289(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln79_fu_167_p2, ap_CS_fsm_state5, icmp_ln87_fu_200_p2, ap_CS_fsm_state6, icmp_ln88_fu_222_p2, icmp_ln78_fu_155_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln78_fu_155_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln79_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln87_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln88_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln78_fu_149_p2 <= std_logic_vector(unsigned(phi_mul_reg_92) + unsigned(ap_const_lv14_366));
    add_ln80_fu_183_p2 <= std_logic_vector(unsigned(phi_mul_reg_92) + unsigned(zext_ln80_fu_179_p1));
    add_ln87_fu_194_p2 <= std_logic_vector(unsigned(phi_mul1_reg_126) + unsigned(ap_const_lv14_366));
    add_ln89_1_fu_253_p2 <= std_logic_vector(unsigned(mul_ln89_reg_312) + unsigned(zext_ln89_1_fu_234_p1));
    add_ln89_fu_242_p2 <= std_logic_vector(unsigned(phi_mul1_reg_126) + unsigned(zext_ln89_2_fu_238_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln87_fu_200_p2)
    begin
        if ((((icmp_ln87_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln87_fu_200_p2)
    begin
        if (((icmp_ln87_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data1_address0 <= zext_ln80_1_fu_189_p1(14 - 1 downto 0);

    data1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data1_ce0 <= ap_const_logic_1;
        else 
            data1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data2_address0 <= zext_ln89_3_fu_248_p1(14 - 1 downto 0);

    data2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data2_ce0 <= ap_const_logic_1;
        else 
            data2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_206_p2 <= std_logic_vector(unsigned(i1_0_reg_115) + unsigned(ap_const_lv5_1));
    i_fu_161_p2 <= std_logic_vector(unsigned(i_0_reg_81) + unsigned(ap_const_lv5_1));
    icmp_ln78_fu_155_p2 <= "1" when (i_0_reg_81 = ap_const_lv5_10) else "0";
    icmp_ln79_fu_167_p2 <= "1" when (j_0_reg_104 = ap_const_lv10_366) else "0";
    icmp_ln87_fu_200_p2 <= "1" when (i1_0_reg_115 = ap_const_lv5_10) else "0";
    icmp_ln88_fu_222_p2 <= "1" when (j2_0_reg_138 = ap_const_lv10_366) else "0";
    j_1_fu_228_p2 <= std_logic_vector(unsigned(j2_0_reg_138) + unsigned(ap_const_lv10_1));
    j_fu_173_p2 <= std_logic_vector(unsigned(j_0_reg_104) + unsigned(ap_const_lv10_1));
    mul_ln89_fu_262_p0 <= mul_ln89_fu_262_p00(5 - 1 downto 0);
    mul_ln89_fu_262_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln89_fu_212_p2),15));
    mul_ln89_fu_262_p1 <= ap_const_lv15_366(11 - 1 downto 0);

    res_address0_assign_proc : process(zext_ln80_1_reg_289, ap_CS_fsm_state4, ap_CS_fsm_state7, zext_ln89_4_fu_258_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            res_address0 <= zext_ln89_4_fu_258_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_address0 <= zext_ln80_1_reg_289(15 - 1 downto 0);
        else 
            res_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(data1_q0, data2_q0, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            res_d0 <= data2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_d0 <= data1_q0;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln89_fu_212_p2 <= (i1_0_reg_115 xor ap_const_lv5_10);
    zext_ln80_1_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_fu_183_p2),64));
    zext_ln80_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_104),14));
    zext_ln89_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_138),15));
    zext_ln89_2_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_138),14));
    zext_ln89_3_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_fu_242_p2),64));
    zext_ln89_4_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_1_reg_330),64));
end behav;
