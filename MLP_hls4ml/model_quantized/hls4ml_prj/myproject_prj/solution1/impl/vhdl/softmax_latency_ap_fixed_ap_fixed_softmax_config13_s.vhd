-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of softmax_latency_ap_fixed_ap_fixed_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_420 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_425 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_430 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_V_reg_435 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_440 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln251_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_1_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_2_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_3_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_4_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_fu_152_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_167_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_182_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_197_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_212_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_fu_227_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_227_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_233_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_233_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_233_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_2_fu_239_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_2_fu_239_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_227_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_245_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_5_fu_251_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_360_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_1_fu_367_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_2_fu_374_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_3_fu_381_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_4_fu_388_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_fu_360_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_266_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1118_1_fu_367_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_374_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_3_fu_381_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_4_fu_388_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_18s_18s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_exp_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_exp_bkb
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_18s_18s_30_1_1_U214 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1118_fu_360_p0,
        din1 => exp_res_0_V_reg_420,
        dout => mul_ln1118_fu_360_p2);

    myproject_mul_mul_18s_18s_30_1_1_U215 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1118_1_fu_367_p0,
        din1 => exp_res_1_V_reg_425,
        dout => mul_ln1118_1_fu_367_p2);

    myproject_mul_mul_18s_18s_30_1_1_U216 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1118_2_fu_374_p0,
        din1 => exp_res_2_V_reg_430,
        dout => mul_ln1118_2_fu_374_p2);

    myproject_mul_mul_18s_18s_30_1_1_U217 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1118_3_fu_381_p0,
        din1 => exp_res_3_V_reg_435,
        dout => mul_ln1118_3_fu_381_p2);

    myproject_mul_mul_18s_18s_30_1_1_U218 : component myproject_mul_mul_18s_18s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln1118_4_fu_388_p0,
        din1 => exp_res_4_V_reg_440,
        dout => mul_ln1118_4_fu_388_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_res_0_V_reg_420 <= exp_table1_q0;
                exp_res_1_V_reg_425 <= exp_table1_q1;
                exp_res_2_V_reg_430 <= exp_table1_q2;
                exp_res_3_V_reg_435 <= exp_table1_q3;
                exp_res_4_V_reg_440 <= exp_table1_q4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_233_p0 <= exp_table1_q2;
    add_ln703_1_fu_233_p1 <= exp_table1_q4;
    add_ln703_1_fu_233_p2 <= std_logic_vector(signed(add_ln703_1_fu_233_p0) + signed(add_ln703_1_fu_233_p1));
    add_ln703_2_fu_239_p1 <= exp_table1_q3;
    add_ln703_2_fu_239_p2 <= std_logic_vector(unsigned(add_ln703_1_fu_233_p2) + unsigned(add_ln703_2_fu_239_p1));
    add_ln703_fu_227_p0 <= exp_table1_q0;
    add_ln703_fu_227_p1 <= exp_table1_q1;
    add_ln703_fu_227_p2 <= std_logic_vector(signed(add_ln703_fu_227_p0) + signed(add_ln703_fu_227_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln1118_fu_360_p2(29 downto 14);
    ap_return_1 <= mul_ln1118_1_fu_367_p2(29 downto 14);
    ap_return_2 <= mul_ln1118_2_fu_374_p2(29 downto 14);
    ap_return_3 <= mul_ln1118_3_fu_381_p2(29 downto 14);
    ap_return_4 <= mul_ln1118_4_fu_388_p2(29 downto 14);
    exp_sum_V_fu_245_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_239_p2) + unsigned(add_ln703_fu_227_p2));
    exp_table1_address0 <= zext_ln251_fu_162_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln251_1_fu_177_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln251_2_fu_192_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln251_3_fu_207_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln251_4_fu_222_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    invert_table2_address0 <= zext_ln259_fu_261_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_1_fu_367_p0 <= sext_ln1116_fu_266_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_374_p0 <= sext_ln1116_fu_266_p1(18 - 1 downto 0);
    mul_ln1118_3_fu_381_p0 <= sext_ln1116_fu_266_p1(18 - 1 downto 0);
    mul_ln1118_4_fu_388_p0 <= sext_ln1116_fu_266_p1(18 - 1 downto 0);
    mul_ln1118_fu_360_p0 <= sext_ln1116_fu_266_p1(18 - 1 downto 0);
        sext_ln1116_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),30));

    y_V_1_fu_167_p4 <= data_1_V_read(15 downto 6);
    y_V_2_fu_182_p4 <= data_2_V_read(15 downto 6);
    y_V_3_fu_197_p4 <= data_3_V_read(15 downto 6);
    y_V_4_fu_212_p4 <= data_4_V_read(15 downto 6);
    y_V_5_fu_251_p4 <= exp_sum_V_fu_245_p2(17 downto 8);
    y_V_fu_152_p4 <= data_0_V_read(15 downto 6);
    zext_ln251_1_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_167_p4),64));
    zext_ln251_2_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_182_p4),64));
    zext_ln251_3_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_197_p4),64));
    zext_ln251_4_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_fu_212_p4),64));
    zext_ln251_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_152_p4),64));
    zext_ln259_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_251_p4),64));
end behav;
