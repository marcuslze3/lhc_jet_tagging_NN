-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config9_s_inverfYi_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of softmax_latency_ap_fixed_ap_fixed_softmax_config9_s_inverfYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000000", 1 => "01000000000000", 2 => "00100000000000", 
    3 => "00010101010101", 4 => "00010000000000", 5 => "00001100110011", 
    6 => "00001010101010", 7 => "00001001001001", 8 => "00001000000000", 
    9 => "00000111000111", 10 => "00000110011001", 11 => "00000101110100", 
    12 => "00000101010101", 13 => "00000100111011", 14 => "00000100100100", 
    15 => "00000100010001", 16 => "00000100000000", 17 => "00000011110000", 
    18 => "00000011100011", 19 => "00000011010111", 20 => "00000011001100", 
    21 => "00000011000011", 22 => "00000010111010", 23 => "00000010110010", 
    24 => "00000010101010", 25 => "00000010100011", 26 => "00000010011101", 
    27 => "00000010010111", 28 => "00000010010010", 29 => "00000010001101", 
    30 => "00000010001000", 31 => "00000010000100", 32 => "00000010000000", 
    33 => "00000001111100", 34 => "00000001111000", 35 => "00000001110101", 
    36 => "00000001110001", 37 => "00000001101110", 38 => "00000001101011", 
    39 => "00000001101001", 40 => "00000001100110", 41 => "00000001100011", 
    42 => "00000001100001", 43 => "00000001011111", 44 => "00000001011101", 
    45 => "00000001011011", 46 => "00000001011001", 47 => "00000001010111", 
    48 => "00000001010101", 49 => "00000001010011", 50 => "00000001010001", 
    51 => "00000001010000", 52 => "00000001001110", 53 => "00000001001101", 
    54 => "00000001001011", 55 => "00000001001010", 56 => "00000001001001", 
    57 => "00000001000111", 58 => "00000001000110", 59 => "00000001000101", 
    60 => "00000001000100", 61 => "00000001000011", 62 => "00000001000010", 
    63 => "00000001000001", 64 => "00000001000000", 65 => "00000000111111", 
    66 => "00000000111110", 67 => "00000000111101", 68 => "00000000111100", 
    69 => "00000000111011", 70 => "00000000111010", 71 => "00000000111001", 
    72 to 73=> "00000000111000", 74 => "00000000110111", 75 => "00000000110110", 
    76 to 77=> "00000000110101", 78 => "00000000110100", 79 to 80=> "00000000110011", 
    81 => "00000000110010", 82 to 83=> "00000000110001", 84 to 85=> "00000000110000", 
    86 to 87=> "00000000101111", 88 to 89=> "00000000101110", 90 to 91=> "00000000101101", 
    92 to 93=> "00000000101100", 94 to 95=> "00000000101011", 96 to 97=> "00000000101010", 
    98 to 99=> "00000000101001", 100 to 102=> "00000000101000", 103 to 105=> "00000000100111", 
    106 to 107=> "00000000100110", 108 to 110=> "00000000100101", 111 to 113=> "00000000100100", 
    114 to 117=> "00000000100011", 118 to 120=> "00000000100010", 121 to 124=> "00000000100001", 
    125 to 128=> "00000000100000", 129 to 132=> "00000000011111", 133 to 136=> "00000000011110", 
    137 to 141=> "00000000011101", 142 to 146=> "00000000011100", 147 to 151=> "00000000011011", 
    152 to 157=> "00000000011010", 158 to 163=> "00000000011001", 164 to 170=> "00000000011000", 
    171 to 178=> "00000000010111", 179 to 186=> "00000000010110", 187 to 195=> "00000000010101", 
    196 to 204=> "00000000010100", 205 to 215=> "00000000010011", 216 to 227=> "00000000010010", 
    228 to 240=> "00000000010001", 241 to 256=> "00000000010000", 257 to 273=> "00000000001111", 
    274 to 292=> "00000000001110", 293 to 315=> "00000000001101", 316 to 341=> "00000000001100", 
    342 to 372=> "00000000001011", 373 to 409=> "00000000001010", 410 to 455=> "00000000001001", 
    456 to 511=> "00000000001000", 512 => "11111111111000", 513 to 568=> "11111111110111", 
    569 to 614=> "11111111110110", 615 to 651=> "11111111110101", 652 to 682=> "11111111110100", 
    683 to 708=> "11111111110011", 709 to 731=> "11111111110010", 732 to 750=> "11111111110001", 
    751 to 768=> "11111111110000", 769 to 783=> "11111111101111", 784 to 796=> "11111111101110", 
    797 to 808=> "11111111101101", 809 to 819=> "11111111101100", 820 to 828=> "11111111101011", 
    829 to 837=> "11111111101010", 838 to 845=> "11111111101001", 846 to 853=> "11111111101000", 
    854 to 860=> "11111111100111", 861 to 866=> "11111111100110", 867 to 872=> "11111111100101", 
    873 to 877=> "11111111100100", 878 to 882=> "11111111100011", 883 to 887=> "11111111100010", 
    888 to 891=> "11111111100001", 892 to 896=> "11111111100000", 897 to 899=> "11111111011111", 
    900 to 903=> "11111111011110", 904 to 906=> "11111111011101", 907 to 910=> "11111111011100", 
    911 to 913=> "11111111011011", 914 to 916=> "11111111011010", 917 to 918=> "11111111011001", 
    919 to 921=> "11111111011000", 922 to 924=> "11111111010111", 925 to 926=> "11111111010110", 
    927 to 928=> "11111111010101", 929 to 930=> "11111111010100", 931 to 932=> "11111111010011", 
    933 to 934=> "11111111010010", 935 to 936=> "11111111010001", 937 to 938=> "11111111010000", 
    939 to 940=> "11111111001111", 941 to 942=> "11111111001110", 943 => "11111111001101", 
    944 to 945=> "11111111001100", 946 => "11111111001011", 947 to 948=> "11111111001010", 
    949 => "11111111001001", 950 => "11111111001000", 951 to 952=> "11111111000111", 
    953 => "11111111000110", 954 => "11111111000101", 955 => "11111111000100", 
    956 => "11111111000011", 957 => "11111111000010", 958 => "11111111000001", 
    959 to 960=> "11111111000000", 961 => "11111110111110", 962 => "11111110111101", 
    963 => "11111110111100", 964 => "11111110111011", 965 => "11111110111010", 
    966 => "11111110111001", 967 => "11111110111000", 968 => "11111110110110", 
    969 => "11111110110101", 970 => "11111110110100", 971 => "11111110110010", 
    972 => "11111110110001", 973 => "11111110101111", 974 => "11111110101110", 
    975 => "11111110101100", 976 => "11111110101010", 977 => "11111110101000", 
    978 => "11111110100110", 979 => "11111110100100", 980 => "11111110100010", 
    981 => "11111110100000", 982 => "11111110011110", 983 => "11111110011100", 
    984 => "11111110011001", 985 => "11111110010110", 986 => "11111110010100", 
    987 => "11111110010001", 988 => "11111110001110", 989 => "11111110001010", 
    990 => "11111110000111", 991 => "11111110000011", 992 => "11111110000000", 
    993 => "11111101111011", 994 => "11111101110111", 995 => "11111101110010", 
    996 => "11111101101101", 997 => "11111101101000", 998 => "11111101100010", 
    999 => "11111101011100", 1000 => "11111101010101", 1001 => "11111101001101", 
    1002 => "11111101000101", 1003 => "11111100111100", 1004 => "11111100110011", 
    1005 => "11111100101000", 1006 => "11111100011100", 1007 => "11111100001111", 
    1008 => "11111100000000", 1009 => "11111011101110", 1010 => "11111011011011", 
    1011 => "11111011000100", 1012 => "11111010101010", 1013 => "11111010001011", 
    1014 => "11111001100110", 1015 => "11111000111000", 1016 => "11111000000000", 
    1017 => "11110110110110", 1018 => "11110101010101", 1019 => "11110011001100", 
    1020 => "11110000000000", 1021 => "11101010101010", 1022 => "11100000000000", 
    1023 => "11000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config9_s_inverfYi is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of softmax_latency_ap_fixed_ap_fixed_softmax_config9_s_inverfYi is
    component softmax_latency_ap_fixed_ap_fixed_softmax_config9_s_inverfYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    softmax_latency_ap_fixed_ap_fixed_softmax_config9_s_inverfYi_rom_U :  component softmax_latency_ap_fixed_ap_fixed_softmax_config9_s_inverfYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


