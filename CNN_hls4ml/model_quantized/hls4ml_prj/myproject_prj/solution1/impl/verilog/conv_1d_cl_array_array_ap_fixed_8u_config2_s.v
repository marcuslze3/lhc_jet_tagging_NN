// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1d_cl_array_array_ap_fixed_8u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_V_TDATA,
        data_V_data_V_TVALID,
        data_V_data_V_TREADY,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_V_TDATA;
input   data_V_data_V_TVALID;
output   data_V_data_V_TREADY;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_V_TREADY;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln50_fu_862_p2;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] p_Result_s_reg_1333;
reg   [0:0] p_Result_s_reg_1333_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [4:0] wp_idx_reg_413;
reg    ap_block_state2_pp0_stage0_iter0;
wire    data_window_0_V_V_full_n;
reg    data_window_0_V_V_write;
reg   [0:0] trunc_ln13_reg_1309;
wire    data_window_1_V_V_full_n;
reg    data_window_1_V_V_write;
reg   [0:0] tmp_327_reg_1321;
wire    data_window_2_V_V_full_n;
reg    data_window_2_V_V_write;
reg   [0:0] tmp_328_reg_1325;
wire    data_window_3_V_V_full_n;
reg    data_window_3_V_V_write;
reg   [0:0] tmp_329_reg_1329;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] data_window_0_V_V_dout;
wire    data_window_0_V_V_empty_n;
reg    data_window_0_V_V_read;
reg   [0:0] p_Result_s_reg_1333_pp0_iter1_reg;
wire   [15:0] data_window_1_V_V_dout;
wire    data_window_1_V_V_empty_n;
reg    data_window_1_V_V_read;
wire   [15:0] data_window_2_V_V_dout;
wire    data_window_2_V_V_empty_n;
reg    data_window_2_V_V_read;
wire   [15:0] data_window_3_V_V_dout;
wire    data_window_3_V_V_empty_n;
reg    data_window_3_V_V_read;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
wire    io_acc_block_signal_op123;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_iw_fu_868_p2;
wire   [0:0] trunc_ln13_fu_952_p1;
reg   [15:0] tmp_data_0_V_4_reg_1313;
reg  signed [15:0] tmp_V_reg_1337;
reg   [15:0] tmp_V_70_reg_1344;
reg  signed [15:0] tmp_V_71_reg_1350;
reg  signed [15:0] tmp_V_72_reg_1357;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] mul_ln1118_106_fu_426_p0;
wire  signed [15:0] mul_ln1118_107_fu_432_p0;
wire  signed [15:0] mul_ln1118_fu_455_p0;
wire   [3:0] trunc_ln23_fu_880_p1;
wire   [3:0] sub_ln23_fu_884_p2;
wire   [1:0] tmp_326_fu_890_p4;
wire   [2:0] trunc_ln25_fu_906_p1;
wire   [0:0] icmp_ln24_fu_900_p2;
wire   [2:0] add_ln24_fu_910_p2;
wire   [0:0] icmp_ln13_fu_874_p2;
wire   [2:0] select_ln24_fu_916_p3;
wire   [2:0] p_Val2_s_fu_932_p8;
wire   [3:0] p_Val2_s_fu_932_p9;
wire   [19:0] shl_ln1118_s_fu_999_p3;
wire  signed [21:0] sext_ln1118_1072_fu_1006_p1;
wire   [21:0] shl_ln_fu_992_p3;
wire   [21:0] sub_ln1118_fu_1010_p2;
wire   [21:0] mul_ln1118_fu_455_p2;
wire   [20:0] shl_ln1118_508_fu_1036_p3;
wire  signed [21:0] sext_ln1118_1073_fu_1043_p1;
wire   [16:0] shl_ln1118_509_fu_1053_p3;
wire   [21:0] sub_ln1118_534_fu_1047_p2;
wire  signed [21:0] sext_ln1118_1074_fu_1060_p1;
wire   [21:0] sub_ln1118_535_fu_1064_p2;
wire   [20:0] shl_ln1118_510_fu_1084_p3;
wire   [17:0] shl_ln1118_511_fu_1095_p3;
wire  signed [21:0] sext_ln1118_1077_fu_1102_p1;
wire  signed [21:0] sext_ln1118_1076_fu_1091_p1;
wire   [21:0] add_ln1118_fu_1106_p2;
wire   [21:0] mul_ln1118_106_fu_426_p2;
wire   [21:0] mul_ln1118_107_fu_432_p2;
wire   [20:0] shl_ln1118_512_fu_1146_p3;
wire  signed [21:0] sext_ln1118_1079_fu_1153_p1;
wire   [21:0] sub_ln1118_536_fu_1157_p2;
wire   [19:0] shl_ln1118_513_fu_1173_p3;
wire  signed [20:0] sext_ln1118_1080_fu_1180_p1;
wire   [17:0] shl_ln1118_514_fu_1190_p3;
wire   [20:0] sub_ln1118_537_fu_1184_p2;
wire  signed [20:0] sext_ln1118_1081_fu_1197_p1;
wire   [20:0] sub_ln1118_538_fu_1201_p2;
wire   [14:0] trunc_ln708_797_fu_1207_p4;
wire   [15:0] trunc_ln708_s_fu_1026_p4;
wire   [15:0] trunc_ln708_792_fu_1070_p4;
wire   [15:0] trunc_ln9_fu_1016_p4;
wire   [15:0] add_ln703_937_fu_1228_p2;
wire   [15:0] trunc_ln708_793_fu_1112_p4;
wire   [15:0] trunc_ln708_794_fu_1122_p4;
wire   [15:0] trunc_ln708_795_fu_1136_p4;
wire   [15:0] trunc_ln708_796_fu_1163_p4;
wire  signed [15:0] sext_ln708_fu_1217_p1;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_data_V_data_V_U_apdone_blk;
wire   [15:0] data_V_data_V_TDATA_int;
wire    data_V_data_V_TVALID_int;
reg    data_V_data_V_TREADY_int;
wire    regslice_both_data_V_data_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

myproject_mux_73_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 4 ),
    .din5_WIDTH( 4 ),
    .din6_WIDTH( 4 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 4 ))
myproject_mux_73_4_1_1_U3(
    .din0(4'd1),
    .din1(4'd3),
    .din2(4'd7),
    .din3(4'd15),
    .din4(4'd14),
    .din5(4'd12),
    .din6(4'd8),
    .din7(p_Val2_s_fu_932_p8),
    .dout(p_Val2_s_fu_932_p9)
);

fifo_w16_d13_A data_window_0_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tmp_data_0_V_4_reg_1313),
    .if_full_n(data_window_0_V_V_full_n),
    .if_write(data_window_0_V_V_write),
    .if_dout(data_window_0_V_V_dout),
    .if_empty_n(data_window_0_V_V_empty_n),
    .if_read(data_window_0_V_V_read)
);

fifo_w16_d13_A data_window_1_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tmp_data_0_V_4_reg_1313),
    .if_full_n(data_window_1_V_V_full_n),
    .if_write(data_window_1_V_V_write),
    .if_dout(data_window_1_V_V_dout),
    .if_empty_n(data_window_1_V_V_empty_n),
    .if_read(data_window_1_V_V_read)
);

fifo_w16_d13_A data_window_2_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tmp_data_0_V_4_reg_1313),
    .if_full_n(data_window_2_V_V_full_n),
    .if_write(data_window_2_V_V_write),
    .if_dout(data_window_2_V_V_dout),
    .if_empty_n(data_window_2_V_V_empty_n),
    .if_read(data_window_2_V_V_read)
);

fifo_w16_d13_A data_window_3_V_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(tmp_data_0_V_4_reg_1313),
    .if_full_n(data_window_3_V_V_full_n),
    .if_write(data_window_3_V_V_write),
    .if_dout(data_window_3_V_V_dout),
    .if_empty_n(data_window_3_V_V_empty_n),
    .if_read(data_window_3_V_V_read)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_data_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_data_V_TDATA),
    .vld_in(data_V_data_V_TVALID),
    .ack_in(regslice_both_data_V_data_V_U_ack_in),
    .data_out(data_V_data_V_TDATA_int),
    .vld_out(data_V_data_V_TVALID_int),
    .ack_out(data_V_data_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        wp_idx_reg_413 <= 5'd0;
    end else if (((icmp_ln50_fu_862_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wp_idx_reg_413 <= i_iw_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_862_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_s_reg_1333 <= p_Val2_s_fu_932_p9[32'd3];
        tmp_327_reg_1321 <= p_Val2_s_fu_932_p9[32'd1];
        tmp_328_reg_1325 <= p_Val2_s_fu_932_p9[32'd2];
        tmp_329_reg_1329 <= p_Val2_s_fu_932_p9[32'd3];
        tmp_data_0_V_4_reg_1313 <= data_V_data_V_TDATA_int;
        trunc_ln13_reg_1309 <= trunc_ln13_fu_952_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_s_reg_1333_pp0_iter1_reg <= p_Result_s_reg_1333;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_Result_s_reg_1333_pp0_iter2_reg <= p_Result_s_reg_1333_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_70_reg_1344 <= data_window_1_V_V_dout;
        tmp_V_71_reg_1350 <= data_window_2_V_V_dout;
        tmp_V_72_reg_1357 <= data_window_3_V_V_dout;
        tmp_V_reg_1337 <= data_window_0_V_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_862_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_862_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_V_TDATA_blk_n = data_V_data_V_TVALID_int;
    end else begin
        data_V_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_data_V_data_V_U_ack_in == 1'b1) & (data_V_data_V_TVALID == 1'b1))) begin
        data_V_data_V_TREADY = 1'b1;
    end else begin
        data_V_data_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_862_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_V_TREADY_int = 1'b1;
    end else begin
        data_V_data_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_0_V_V_read = 1'b1;
    end else begin
        data_window_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_reg_1309 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_0_V_V_write = 1'b1;
    end else begin
        data_window_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_1_V_V_read = 1'b1;
    end else begin
        data_window_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_327_reg_1321 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_1_V_V_write = 1'b1;
    end else begin
        data_window_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_2_V_V_read = 1'b1;
    end else begin
        data_window_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_328_reg_1325 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_2_V_V_write = 1'b1;
    end else begin
        data_window_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_3_V_V_read = 1'b1;
    end else begin
        data_window_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_329_reg_1329 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_window_3_V_V_write = 1'b1;
    end else begin
        data_window_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln50_fu_862_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((icmp_ln50_fu_862_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1118_fu_1106_p2 = ($signed(sext_ln1118_1077_fu_1102_p1) + $signed(sext_ln1118_1076_fu_1091_p1));

assign add_ln24_fu_910_p2 = ($signed(3'd7) + $signed(trunc_ln25_fu_906_p1));

assign add_ln703_937_fu_1228_p2 = (trunc_ln708_792_fu_1070_p4 + 16'd256);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (io_acc_block_signal_op123 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln50_fu_862_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_3_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_2_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_1_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_0_V_V_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_329_reg_1329 == 1'd1) & (data_window_3_V_V_full_n == 1'b0)) | ((tmp_328_reg_1325 == 1'd1) & (data_window_2_V_V_full_n == 1'b0)) | ((tmp_327_reg_1321 == 1'd1) & (data_window_1_V_V_full_n == 1'b0)) | ((trunc_ln13_reg_1309 == 1'd1) & (data_window_0_V_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (io_acc_block_signal_op123 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln50_fu_862_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_3_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_2_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_1_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_0_V_V_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_329_reg_1329 == 1'd1) & (data_window_3_V_V_full_n == 1'b0)) | ((tmp_328_reg_1325 == 1'd1) & (data_window_2_V_V_full_n == 1'b0)) | ((tmp_327_reg_1321 == 1'd1) & (data_window_1_V_V_full_n == 1'b0)) | ((trunc_ln13_reg_1309 == 1'd1) & (data_window_0_V_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (io_acc_block_signal_op123 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln50_fu_862_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_3_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_2_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_1_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_0_V_V_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_329_reg_1329 == 1'd1) & (data_window_3_V_V_full_n == 1'b0)) | ((tmp_328_reg_1325 == 1'd1) & (data_window_2_V_V_full_n == 1'b0)) | ((tmp_327_reg_1321 == 1'd1) & (data_window_1_V_V_full_n == 1'b0)) | ((trunc_ln13_reg_1309 == 1'd1) & (data_window_0_V_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln50_fu_862_p2 == 1'd0) & (data_V_data_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((tmp_329_reg_1329 == 1'd1) & (data_window_3_V_V_full_n == 1'b0)) | ((tmp_328_reg_1325 == 1'd1) & (data_window_2_V_V_full_n == 1'b0)) | ((tmp_327_reg_1321 == 1'd1) & (data_window_1_V_V_full_n == 1'b0)) | ((trunc_ln13_reg_1309 == 1'd1) & (data_window_0_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_3_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_2_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_1_V_V_empty_n == 1'b0)) | ((p_Result_s_reg_1333_pp0_iter1_reg == 1'd1) & (data_window_0_V_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((p_Result_s_reg_1333_pp0_iter2_reg == 1'd1) & (io_acc_block_signal_op123 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_iw_fu_868_p2 = (wp_idx_reg_413 + 5'd1);

assign icmp_ln13_fu_874_p2 = ((wp_idx_reg_413 < 5'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_900_p2 = ((tmp_326_fu_890_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_862_p2 = ((wp_idx_reg_413 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op123 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign mul_ln1118_106_fu_426_p0 = tmp_V_71_reg_1350;

assign mul_ln1118_106_fu_426_p2 = ($signed(mul_ln1118_106_fu_426_p0) * $signed(-'h2A));

assign mul_ln1118_107_fu_432_p0 = tmp_V_72_reg_1357;

assign mul_ln1118_107_fu_432_p2 = ($signed(mul_ln1118_107_fu_432_p0) * $signed(-'h2A));

assign mul_ln1118_fu_455_p0 = tmp_V_reg_1337;

assign mul_ln1118_fu_455_p2 = ($signed(mul_ln1118_fu_455_p0) * $signed('h3A));

assign p_Val2_s_fu_932_p8 = ((icmp_ln13_fu_874_p2[0:0] === 1'b1) ? trunc_ln25_fu_906_p1 : select_ln24_fu_916_p3);

assign res_V_data_0_V_din = ($signed(trunc_ln708_793_fu_1112_p4) + $signed(16'd65504));

assign res_V_data_1_V_din = (trunc_ln9_fu_1016_p4 + add_ln703_937_fu_1228_p2);

assign res_V_data_2_V_din = 16'd192;

assign res_V_data_3_V_din = (trunc_ln708_795_fu_1136_p4 + 16'd32);

assign res_V_data_4_V_din = (trunc_ln708_796_fu_1163_p4 + 16'd192);

assign res_V_data_5_V_din = (trunc_ln708_794_fu_1122_p4 + 16'd192);

assign res_V_data_6_V_din = ($signed(sext_ln708_fu_1217_p1) + $signed(16'd640));

assign res_V_data_7_V_din = (trunc_ln708_s_fu_1026_p4 + 16'd224);

assign select_ln24_fu_916_p3 = ((icmp_ln24_fu_900_p2[0:0] === 1'b1) ? add_ln24_fu_910_p2 : 3'd3);

assign sext_ln1118_1072_fu_1006_p1 = $signed(shl_ln1118_s_fu_999_p3);

assign sext_ln1118_1073_fu_1043_p1 = $signed(shl_ln1118_508_fu_1036_p3);

assign sext_ln1118_1074_fu_1060_p1 = $signed(shl_ln1118_509_fu_1053_p3);

assign sext_ln1118_1076_fu_1091_p1 = $signed(shl_ln1118_510_fu_1084_p3);

assign sext_ln1118_1077_fu_1102_p1 = $signed(shl_ln1118_511_fu_1095_p3);

assign sext_ln1118_1079_fu_1153_p1 = $signed(shl_ln1118_512_fu_1146_p3);

assign sext_ln1118_1080_fu_1180_p1 = $signed(shl_ln1118_513_fu_1173_p3);

assign sext_ln1118_1081_fu_1197_p1 = $signed(shl_ln1118_514_fu_1190_p3);

assign sext_ln708_fu_1217_p1 = $signed(trunc_ln708_797_fu_1207_p4);

assign shl_ln1118_508_fu_1036_p3 = {{tmp_V_70_reg_1344}, {5'd0}};

assign shl_ln1118_509_fu_1053_p3 = {{tmp_V_70_reg_1344}, {1'd0}};

assign shl_ln1118_510_fu_1084_p3 = {{tmp_V_71_reg_1350}, {5'd0}};

assign shl_ln1118_511_fu_1095_p3 = {{tmp_V_71_reg_1350}, {2'd0}};

assign shl_ln1118_512_fu_1146_p3 = {{tmp_V_72_reg_1357}, {5'd0}};

assign shl_ln1118_513_fu_1173_p3 = {{tmp_V_72_reg_1357}, {4'd0}};

assign shl_ln1118_514_fu_1190_p3 = {{tmp_V_72_reg_1357}, {2'd0}};

assign shl_ln1118_s_fu_999_p3 = {{tmp_V_reg_1337}, {4'd0}};

assign shl_ln_fu_992_p3 = {{tmp_V_reg_1337}, {6'd0}};

assign start_out = real_start;

assign sub_ln1118_534_fu_1047_p2 = ($signed(22'd0) - $signed(sext_ln1118_1073_fu_1043_p1));

assign sub_ln1118_535_fu_1064_p2 = ($signed(sub_ln1118_534_fu_1047_p2) - $signed(sext_ln1118_1074_fu_1060_p1));

assign sub_ln1118_536_fu_1157_p2 = ($signed(22'd0) - $signed(sext_ln1118_1079_fu_1153_p1));

assign sub_ln1118_537_fu_1184_p2 = ($signed(21'd0) - $signed(sext_ln1118_1080_fu_1180_p1));

assign sub_ln1118_538_fu_1201_p2 = ($signed(sub_ln1118_537_fu_1184_p2) - $signed(sext_ln1118_1081_fu_1197_p1));

assign sub_ln1118_fu_1010_p2 = ($signed(sext_ln1118_1072_fu_1006_p1) - $signed(shl_ln_fu_992_p3));

assign sub_ln23_fu_884_p2 = (4'd0 - trunc_ln23_fu_880_p1);

assign tmp_326_fu_890_p4 = {{sub_ln23_fu_884_p2[3:2]}};

assign trunc_ln13_fu_952_p1 = p_Val2_s_fu_932_p9[0:0];

assign trunc_ln23_fu_880_p1 = wp_idx_reg_413[3:0];

assign trunc_ln25_fu_906_p1 = wp_idx_reg_413[2:0];

assign trunc_ln708_792_fu_1070_p4 = {{sub_ln1118_535_fu_1064_p2[21:6]}};

assign trunc_ln708_793_fu_1112_p4 = {{add_ln1118_fu_1106_p2[21:6]}};

assign trunc_ln708_794_fu_1122_p4 = {{mul_ln1118_106_fu_426_p2[21:6]}};

assign trunc_ln708_795_fu_1136_p4 = {{mul_ln1118_107_fu_432_p2[21:6]}};

assign trunc_ln708_796_fu_1163_p4 = {{sub_ln1118_536_fu_1157_p2[21:6]}};

assign trunc_ln708_797_fu_1207_p4 = {{sub_ln1118_538_fu_1201_p2[20:6]}};

assign trunc_ln708_s_fu_1026_p4 = {{mul_ln1118_fu_455_p2[21:6]}};

assign trunc_ln9_fu_1016_p4 = {{sub_ln1118_fu_1010_p2[21:6]}};

endmodule //conv_1d_cl_array_array_ap_fixed_8u_config2_s
