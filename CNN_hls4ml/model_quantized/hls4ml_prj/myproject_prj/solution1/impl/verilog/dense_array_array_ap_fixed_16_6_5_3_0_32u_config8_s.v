// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_array_ap_fixed_16_6_5_3_0_32u_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        data_stream_V_data_4_V_dout,
        data_stream_V_data_4_V_empty_n,
        data_stream_V_data_4_V_read,
        data_stream_V_data_5_V_dout,
        data_stream_V_data_5_V_empty_n,
        data_stream_V_data_5_V_read,
        data_stream_V_data_6_V_dout,
        data_stream_V_data_6_V_empty_n,
        data_stream_V_data_6_V_read,
        data_stream_V_data_7_V_dout,
        data_stream_V_data_7_V_empty_n,
        data_stream_V_data_7_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write,
        res_stream_V_data_16_V_din,
        res_stream_V_data_16_V_full_n,
        res_stream_V_data_16_V_write,
        res_stream_V_data_17_V_din,
        res_stream_V_data_17_V_full_n,
        res_stream_V_data_17_V_write,
        res_stream_V_data_18_V_din,
        res_stream_V_data_18_V_full_n,
        res_stream_V_data_18_V_write,
        res_stream_V_data_19_V_din,
        res_stream_V_data_19_V_full_n,
        res_stream_V_data_19_V_write,
        res_stream_V_data_20_V_din,
        res_stream_V_data_20_V_full_n,
        res_stream_V_data_20_V_write,
        res_stream_V_data_21_V_din,
        res_stream_V_data_21_V_full_n,
        res_stream_V_data_21_V_write,
        res_stream_V_data_22_V_din,
        res_stream_V_data_22_V_full_n,
        res_stream_V_data_22_V_write,
        res_stream_V_data_23_V_din,
        res_stream_V_data_23_V_full_n,
        res_stream_V_data_23_V_write,
        res_stream_V_data_24_V_din,
        res_stream_V_data_24_V_full_n,
        res_stream_V_data_24_V_write,
        res_stream_V_data_25_V_din,
        res_stream_V_data_25_V_full_n,
        res_stream_V_data_25_V_write,
        res_stream_V_data_26_V_din,
        res_stream_V_data_26_V_full_n,
        res_stream_V_data_26_V_write,
        res_stream_V_data_27_V_din,
        res_stream_V_data_27_V_full_n,
        res_stream_V_data_27_V_write,
        res_stream_V_data_28_V_din,
        res_stream_V_data_28_V_full_n,
        res_stream_V_data_28_V_write,
        res_stream_V_data_29_V_din,
        res_stream_V_data_29_V_full_n,
        res_stream_V_data_29_V_write,
        res_stream_V_data_30_V_din,
        res_stream_V_data_30_V_full_n,
        res_stream_V_data_30_V_write,
        res_stream_V_data_31_V_din,
        res_stream_V_data_31_V_full_n,
        res_stream_V_data_31_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [6:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [6:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [6:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [6:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
input  [6:0] data_stream_V_data_4_V_dout;
input   data_stream_V_data_4_V_empty_n;
output   data_stream_V_data_4_V_read;
input  [6:0] data_stream_V_data_5_V_dout;
input   data_stream_V_data_5_V_empty_n;
output   data_stream_V_data_5_V_read;
input  [6:0] data_stream_V_data_6_V_dout;
input   data_stream_V_data_6_V_empty_n;
output   data_stream_V_data_6_V_read;
input  [6:0] data_stream_V_data_7_V_dout;
input   data_stream_V_data_7_V_empty_n;
output   data_stream_V_data_7_V_read;
output  [15:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [15:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [15:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [15:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [15:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [15:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [15:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [15:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [15:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [15:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [15:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [15:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [15:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [15:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [15:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [15:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;
output  [15:0] res_stream_V_data_16_V_din;
input   res_stream_V_data_16_V_full_n;
output   res_stream_V_data_16_V_write;
output  [15:0] res_stream_V_data_17_V_din;
input   res_stream_V_data_17_V_full_n;
output   res_stream_V_data_17_V_write;
output  [15:0] res_stream_V_data_18_V_din;
input   res_stream_V_data_18_V_full_n;
output   res_stream_V_data_18_V_write;
output  [15:0] res_stream_V_data_19_V_din;
input   res_stream_V_data_19_V_full_n;
output   res_stream_V_data_19_V_write;
output  [15:0] res_stream_V_data_20_V_din;
input   res_stream_V_data_20_V_full_n;
output   res_stream_V_data_20_V_write;
output  [15:0] res_stream_V_data_21_V_din;
input   res_stream_V_data_21_V_full_n;
output   res_stream_V_data_21_V_write;
output  [15:0] res_stream_V_data_22_V_din;
input   res_stream_V_data_22_V_full_n;
output   res_stream_V_data_22_V_write;
output  [15:0] res_stream_V_data_23_V_din;
input   res_stream_V_data_23_V_full_n;
output   res_stream_V_data_23_V_write;
output  [15:0] res_stream_V_data_24_V_din;
input   res_stream_V_data_24_V_full_n;
output   res_stream_V_data_24_V_write;
output  [15:0] res_stream_V_data_25_V_din;
input   res_stream_V_data_25_V_full_n;
output   res_stream_V_data_25_V_write;
output  [15:0] res_stream_V_data_26_V_din;
input   res_stream_V_data_26_V_full_n;
output   res_stream_V_data_26_V_write;
output  [15:0] res_stream_V_data_27_V_din;
input   res_stream_V_data_27_V_full_n;
output   res_stream_V_data_27_V_write;
output  [15:0] res_stream_V_data_28_V_din;
input   res_stream_V_data_28_V_full_n;
output   res_stream_V_data_28_V_write;
output  [15:0] res_stream_V_data_29_V_din;
input   res_stream_V_data_29_V_full_n;
output   res_stream_V_data_29_V_write;
output  [15:0] res_stream_V_data_30_V_din;
input   res_stream_V_data_30_V_full_n;
output   res_stream_V_data_30_V_write;
output  [15:0] res_stream_V_data_31_V_din;
input   res_stream_V_data_31_V_full_n;
output   res_stream_V_data_31_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg data_stream_V_data_4_V_read;
reg data_stream_V_data_5_V_read;
reg data_stream_V_data_6_V_read;
reg data_stream_V_data_7_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;
reg res_stream_V_data_16_V_write;
reg res_stream_V_data_17_V_write;
reg res_stream_V_data_18_V_write;
reg res_stream_V_data_19_V_write;
reg res_stream_V_data_20_V_write;
reg res_stream_V_data_21_V_write;
reg res_stream_V_data_22_V_write;
reg res_stream_V_data_23_V_write;
reg res_stream_V_data_24_V_write;
reg res_stream_V_data_25_V_write;
reg res_stream_V_data_26_V_write;
reg res_stream_V_data_27_V_write;
reg res_stream_V_data_28_V_write;
reg res_stream_V_data_29_V_write;
reg res_stream_V_data_30_V_write;
reg res_stream_V_data_31_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    data_stream_V_data_4_V_blk_n;
reg    data_stream_V_data_5_V_blk_n;
reg    data_stream_V_data_6_V_blk_n;
reg    data_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state5;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg    res_stream_V_data_16_V_blk_n;
reg    res_stream_V_data_17_V_blk_n;
reg    res_stream_V_data_18_V_blk_n;
reg    res_stream_V_data_19_V_blk_n;
reg    res_stream_V_data_20_V_blk_n;
reg    res_stream_V_data_21_V_blk_n;
reg    res_stream_V_data_22_V_blk_n;
reg    res_stream_V_data_23_V_blk_n;
reg    res_stream_V_data_24_V_blk_n;
reg    res_stream_V_data_25_V_blk_n;
reg    res_stream_V_data_26_V_blk_n;
reg    res_stream_V_data_27_V_blk_n;
reg    res_stream_V_data_28_V_blk_n;
reg    res_stream_V_data_29_V_blk_n;
reg    res_stream_V_data_30_V_blk_n;
reg    res_stream_V_data_31_V_blk_n;
reg   [3:0] i_in_0_reg_1059;
wire   [0:0] icmp_ln41_fu_1153_p2;
reg   [0:0] icmp_ln41_reg_2512;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op212;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_in_fu_1159_p2;
reg   [3:0] i_in_reg_2516;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_9;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_10;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_11;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_12;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_13;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_14;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_15;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_16;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_17;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_18;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_19;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_20;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_21;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_22;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_23;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_24;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_25;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_26;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_27;
wire   [15:0] grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_28;
reg   [3:0] ap_phi_mux_i_in_0_phi_fu_1063_p4;
wire    ap_CS_fsm_state4;
reg   [6:0] data_72_V_fu_624;
reg   [6:0] data_73_V_fu_628;
reg   [6:0] data_74_V_fu_632;
reg   [6:0] data_75_V_fu_636;
reg   [6:0] data_76_V_fu_640;
reg   [6:0] data_77_V_fu_644;
reg   [6:0] data_78_V_fu_648;
reg   [6:0] data_79_V_fu_652;
reg   [6:0] data_72_V_1_fu_656;
reg   [6:0] data_73_V_1_fu_660;
reg   [6:0] data_74_V_1_fu_664;
reg   [6:0] data_75_V_1_fu_668;
reg   [6:0] data_76_V_1_fu_672;
reg   [6:0] data_77_V_1_fu_676;
reg   [6:0] data_78_V_1_fu_680;
reg   [6:0] data_79_V_1_fu_684;
reg   [6:0] data_72_V_2_fu_688;
reg   [6:0] data_73_V_2_fu_692;
reg   [6:0] data_74_V_2_fu_696;
reg   [6:0] data_75_V_2_fu_700;
reg   [6:0] data_76_V_2_fu_704;
reg   [6:0] data_77_V_2_fu_708;
reg   [6:0] data_79_V_2_fu_712;
reg   [6:0] data_72_V_3_fu_716;
reg   [6:0] data_73_V_3_fu_720;
reg   [6:0] data_74_V_3_fu_724;
reg   [6:0] data_75_V_3_fu_728;
reg   [6:0] data_76_V_3_fu_732;
reg   [6:0] data_77_V_3_fu_736;
reg   [6:0] data_78_V_2_fu_740;
reg   [6:0] data_79_V_3_fu_744;
reg   [6:0] data_72_V_4_fu_748;
reg   [6:0] data_73_V_4_fu_752;
reg   [6:0] data_74_V_4_fu_756;
reg   [6:0] data_75_V_4_fu_760;
reg   [6:0] data_76_V_4_fu_764;
reg   [6:0] data_77_V_4_fu_768;
reg   [6:0] data_78_V_3_fu_772;
reg   [6:0] data_79_V_4_fu_776;
reg   [6:0] data_72_V_5_fu_780;
reg   [6:0] data_73_V_5_fu_784;
reg   [6:0] data_74_V_5_fu_788;
reg   [6:0] data_75_V_5_fu_792;
reg   [6:0] data_76_V_5_fu_796;
reg   [6:0] data_77_V_5_fu_800;
reg   [6:0] data_78_V_4_fu_804;
reg   [6:0] data_79_V_5_fu_808;
reg   [6:0] data_72_V_6_fu_812;
reg   [6:0] data_73_V_6_fu_816;
reg   [6:0] data_74_V_6_fu_820;
reg   [6:0] data_75_V_6_fu_824;
reg   [6:0] data_76_V_6_fu_828;
reg   [6:0] data_77_V_6_fu_832;
reg   [6:0] data_78_V_5_fu_836;
reg   [6:0] data_79_V_6_fu_840;
reg   [6:0] data_72_V_7_fu_844;
reg   [6:0] data_73_V_7_fu_848;
reg   [6:0] data_74_V_7_fu_852;
reg   [6:0] data_75_V_7_fu_856;
reg   [6:0] data_76_V_7_fu_860;
reg   [6:0] data_77_V_7_fu_864;
reg   [6:0] data_78_V_6_fu_868;
reg   [6:0] data_79_V_7_fu_872;
reg   [6:0] data_72_V_8_fu_876;
reg   [6:0] data_73_V_8_fu_880;
reg   [6:0] data_74_V_8_fu_884;
reg   [6:0] data_75_V_8_fu_888;
reg   [6:0] data_76_V_8_fu_892;
reg   [6:0] data_77_V_8_fu_896;
reg   [6:0] data_79_V_8_fu_900;
reg   [6:0] data_72_V_9_fu_904;
reg   [6:0] data_73_V_9_fu_908;
reg   [6:0] data_74_V_9_fu_912;
reg   [6:0] data_75_V_9_fu_916;
reg   [6:0] data_76_V_9_fu_920;
reg   [6:0] data_77_V_9_fu_924;
reg   [6:0] data_78_V_7_fu_928;
reg   [6:0] data_79_V_9_fu_932;
wire    io_acc_block_signal_op418;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_0_V_read(data_72_V_fu_624),
    .data_1_V_read(data_73_V_fu_628),
    .data_2_V_read(data_74_V_fu_632),
    .data_3_V_read(data_75_V_fu_636),
    .data_4_V_read(data_76_V_fu_640),
    .data_5_V_read(data_77_V_fu_644),
    .data_6_V_read(data_78_V_fu_648),
    .data_7_V_read(data_79_V_fu_652),
    .data_8_V_read(data_72_V_1_fu_656),
    .data_9_V_read(data_73_V_1_fu_660),
    .data_10_V_read(data_74_V_1_fu_664),
    .data_11_V_read(data_75_V_1_fu_668),
    .data_12_V_read(data_76_V_1_fu_672),
    .data_13_V_read(data_77_V_1_fu_676),
    .data_14_V_read(data_78_V_1_fu_680),
    .data_15_V_read(data_79_V_1_fu_684),
    .data_16_V_read(data_72_V_2_fu_688),
    .data_17_V_read(data_73_V_2_fu_692),
    .data_18_V_read(data_74_V_2_fu_696),
    .data_19_V_read(data_75_V_2_fu_700),
    .data_20_V_read(data_76_V_2_fu_704),
    .data_21_V_read(data_77_V_2_fu_708),
    .data_23_V_read(data_79_V_2_fu_712),
    .data_24_V_read(data_72_V_3_fu_716),
    .data_25_V_read(data_73_V_3_fu_720),
    .data_26_V_read(data_74_V_3_fu_724),
    .data_27_V_read(data_75_V_3_fu_728),
    .data_28_V_read(data_76_V_3_fu_732),
    .data_29_V_read(data_77_V_3_fu_736),
    .data_30_V_read(data_78_V_2_fu_740),
    .data_31_V_read(data_79_V_3_fu_744),
    .data_32_V_read(data_72_V_4_fu_748),
    .data_33_V_read(data_73_V_4_fu_752),
    .data_34_V_read(data_74_V_4_fu_756),
    .data_35_V_read(data_75_V_4_fu_760),
    .data_36_V_read(data_76_V_4_fu_764),
    .data_37_V_read(data_77_V_4_fu_768),
    .data_38_V_read(data_78_V_3_fu_772),
    .data_39_V_read(data_79_V_4_fu_776),
    .data_40_V_read(data_72_V_5_fu_780),
    .data_41_V_read(data_73_V_5_fu_784),
    .data_42_V_read(data_74_V_5_fu_788),
    .data_43_V_read(data_75_V_5_fu_792),
    .data_44_V_read(data_76_V_5_fu_796),
    .data_45_V_read(data_77_V_5_fu_800),
    .data_46_V_read(data_78_V_4_fu_804),
    .data_47_V_read(data_79_V_5_fu_808),
    .data_48_V_read(data_72_V_6_fu_812),
    .data_49_V_read(data_73_V_6_fu_816),
    .data_50_V_read(data_74_V_6_fu_820),
    .data_51_V_read(data_75_V_6_fu_824),
    .data_52_V_read(data_76_V_6_fu_828),
    .data_53_V_read(data_77_V_6_fu_832),
    .data_54_V_read(data_78_V_5_fu_836),
    .data_55_V_read(data_79_V_6_fu_840),
    .data_56_V_read(data_72_V_7_fu_844),
    .data_57_V_read(data_73_V_7_fu_848),
    .data_58_V_read(data_74_V_7_fu_852),
    .data_59_V_read(data_75_V_7_fu_856),
    .data_60_V_read(data_76_V_7_fu_860),
    .data_61_V_read(data_77_V_7_fu_864),
    .data_62_V_read(data_78_V_6_fu_868),
    .data_63_V_read(data_79_V_7_fu_872),
    .data_64_V_read(data_72_V_8_fu_876),
    .data_65_V_read(data_73_V_8_fu_880),
    .data_66_V_read(data_74_V_8_fu_884),
    .data_67_V_read(data_75_V_8_fu_888),
    .data_68_V_read(data_76_V_8_fu_892),
    .data_69_V_read(data_77_V_8_fu_896),
    .data_71_V_read(data_79_V_8_fu_900),
    .data_72_V_read(data_72_V_9_fu_904),
    .data_73_V_read(data_73_V_9_fu_908),
    .data_74_V_read(data_74_V_9_fu_912),
    .data_75_V_read(data_75_V_9_fu_916),
    .data_76_V_read(data_76_V_9_fu_920),
    .data_77_V_read(data_77_V_9_fu_924),
    .data_78_V_read(data_78_V_7_fu_928),
    .data_79_V_read(data_79_V_9_fu_932),
    .ap_return_0(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_15),
    .ap_return_16(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_16),
    .ap_return_17(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_17),
    .ap_return_18(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_18),
    .ap_return_19(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_19),
    .ap_return_20(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_20),
    .ap_return_21(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_21),
    .ap_return_22(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_22),
    .ap_return_23(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_23),
    .ap_return_24(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_24),
    .ap_return_25(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_25),
    .ap_return_26(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_26),
    .ap_return_27(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_27),
    .ap_return_28(grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_28)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln41_reg_2512 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_0_reg_1059 <= i_in_reg_2516;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_1059 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_1_fu_656 <= data_stream_V_data_0_V_dout;
        data_73_V_1_fu_660 <= data_stream_V_data_1_V_dout;
        data_74_V_1_fu_664 <= data_stream_V_data_2_V_dout;
        data_75_V_1_fu_668 <= data_stream_V_data_3_V_dout;
        data_76_V_1_fu_672 <= data_stream_V_data_4_V_dout;
        data_77_V_1_fu_676 <= data_stream_V_data_5_V_dout;
        data_78_V_1_fu_680 <= data_stream_V_data_6_V_dout;
        data_79_V_1_fu_684 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_2_fu_688 <= data_stream_V_data_0_V_dout;
        data_73_V_2_fu_692 <= data_stream_V_data_1_V_dout;
        data_74_V_2_fu_696 <= data_stream_V_data_2_V_dout;
        data_75_V_2_fu_700 <= data_stream_V_data_3_V_dout;
        data_76_V_2_fu_704 <= data_stream_V_data_4_V_dout;
        data_77_V_2_fu_708 <= data_stream_V_data_5_V_dout;
        data_79_V_2_fu_712 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_3_fu_716 <= data_stream_V_data_0_V_dout;
        data_73_V_3_fu_720 <= data_stream_V_data_1_V_dout;
        data_74_V_3_fu_724 <= data_stream_V_data_2_V_dout;
        data_75_V_3_fu_728 <= data_stream_V_data_3_V_dout;
        data_76_V_3_fu_732 <= data_stream_V_data_4_V_dout;
        data_77_V_3_fu_736 <= data_stream_V_data_5_V_dout;
        data_78_V_2_fu_740 <= data_stream_V_data_6_V_dout;
        data_79_V_3_fu_744 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_4_fu_748 <= data_stream_V_data_0_V_dout;
        data_73_V_4_fu_752 <= data_stream_V_data_1_V_dout;
        data_74_V_4_fu_756 <= data_stream_V_data_2_V_dout;
        data_75_V_4_fu_760 <= data_stream_V_data_3_V_dout;
        data_76_V_4_fu_764 <= data_stream_V_data_4_V_dout;
        data_77_V_4_fu_768 <= data_stream_V_data_5_V_dout;
        data_78_V_3_fu_772 <= data_stream_V_data_6_V_dout;
        data_79_V_4_fu_776 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_5_fu_780 <= data_stream_V_data_0_V_dout;
        data_73_V_5_fu_784 <= data_stream_V_data_1_V_dout;
        data_74_V_5_fu_788 <= data_stream_V_data_2_V_dout;
        data_75_V_5_fu_792 <= data_stream_V_data_3_V_dout;
        data_76_V_5_fu_796 <= data_stream_V_data_4_V_dout;
        data_77_V_5_fu_800 <= data_stream_V_data_5_V_dout;
        data_78_V_4_fu_804 <= data_stream_V_data_6_V_dout;
        data_79_V_5_fu_808 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_6_fu_812 <= data_stream_V_data_0_V_dout;
        data_73_V_6_fu_816 <= data_stream_V_data_1_V_dout;
        data_74_V_6_fu_820 <= data_stream_V_data_2_V_dout;
        data_75_V_6_fu_824 <= data_stream_V_data_3_V_dout;
        data_76_V_6_fu_828 <= data_stream_V_data_4_V_dout;
        data_77_V_6_fu_832 <= data_stream_V_data_5_V_dout;
        data_78_V_5_fu_836 <= data_stream_V_data_6_V_dout;
        data_79_V_6_fu_840 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_7_fu_844 <= data_stream_V_data_0_V_dout;
        data_73_V_7_fu_848 <= data_stream_V_data_1_V_dout;
        data_74_V_7_fu_852 <= data_stream_V_data_2_V_dout;
        data_75_V_7_fu_856 <= data_stream_V_data_3_V_dout;
        data_76_V_7_fu_860 <= data_stream_V_data_4_V_dout;
        data_77_V_7_fu_864 <= data_stream_V_data_5_V_dout;
        data_78_V_6_fu_868 <= data_stream_V_data_6_V_dout;
        data_79_V_7_fu_872 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd8) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_8_fu_876 <= data_stream_V_data_0_V_dout;
        data_73_V_8_fu_880 <= data_stream_V_data_1_V_dout;
        data_74_V_8_fu_884 <= data_stream_V_data_2_V_dout;
        data_75_V_8_fu_888 <= data_stream_V_data_3_V_dout;
        data_76_V_8_fu_892 <= data_stream_V_data_4_V_dout;
        data_77_V_8_fu_896 <= data_stream_V_data_5_V_dout;
        data_79_V_8_fu_900 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((i_in_0_reg_1059 == 4'd9) | ((i_in_0_reg_1059 == 4'd10) | ((i_in_0_reg_1059 == 4'd11) | ((i_in_0_reg_1059 == 4'd12) | ((i_in_0_reg_1059 == 4'd13) | ((i_in_0_reg_1059 == 4'd14) | (i_in_0_reg_1059 == 4'd15))))))))) begin
        data_72_V_9_fu_904 <= data_stream_V_data_0_V_dout;
        data_73_V_9_fu_908 <= data_stream_V_data_1_V_dout;
        data_74_V_9_fu_912 <= data_stream_V_data_2_V_dout;
        data_75_V_9_fu_916 <= data_stream_V_data_3_V_dout;
        data_76_V_9_fu_920 <= data_stream_V_data_4_V_dout;
        data_77_V_9_fu_924 <= data_stream_V_data_5_V_dout;
        data_78_V_7_fu_928 <= data_stream_V_data_6_V_dout;
        data_79_V_9_fu_932 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (i_in_0_reg_1059 == 4'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_72_V_fu_624 <= data_stream_V_data_0_V_dout;
        data_73_V_fu_628 <= data_stream_V_data_1_V_dout;
        data_74_V_fu_632 <= data_stream_V_data_2_V_dout;
        data_75_V_fu_636 <= data_stream_V_data_3_V_dout;
        data_76_V_fu_640 <= data_stream_V_data_4_V_dout;
        data_77_V_fu_644 <= data_stream_V_data_5_V_dout;
        data_78_V_fu_648 <= data_stream_V_data_6_V_dout;
        data_79_V_fu_652 <= data_stream_V_data_7_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_reg_2516 <= i_in_fu_1159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln41_reg_2512 <= icmp_ln41_fu_1153_p2;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_1153_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_2512 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_in_0_phi_fu_1063_p4 = i_in_reg_2516;
    end else begin
        ap_phi_mux_i_in_0_phi_fu_1063_p4 = i_in_0_reg_1059;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_4_V_blk_n = data_stream_V_data_4_V_empty_n;
    end else begin
        data_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_4_V_read = 1'b1;
    end else begin
        data_stream_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_5_V_blk_n = data_stream_V_data_5_V_empty_n;
    end else begin
        data_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_5_V_read = 1'b1;
    end else begin
        data_stream_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_6_V_blk_n = data_stream_V_data_6_V_empty_n;
    end else begin
        data_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_6_V_read = 1'b1;
    end else begin
        data_stream_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_7_V_blk_n = data_stream_V_data_7_V_empty_n;
    end else begin
        data_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_stream_V_data_7_V_read = 1'b1;
    end else begin
        data_stream_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_16_V_blk_n = res_stream_V_data_16_V_full_n;
    end else begin
        res_stream_V_data_16_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_16_V_write = 1'b1;
    end else begin
        res_stream_V_data_16_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_17_V_blk_n = res_stream_V_data_17_V_full_n;
    end else begin
        res_stream_V_data_17_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_17_V_write = 1'b1;
    end else begin
        res_stream_V_data_17_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_18_V_blk_n = res_stream_V_data_18_V_full_n;
    end else begin
        res_stream_V_data_18_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_18_V_write = 1'b1;
    end else begin
        res_stream_V_data_18_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_19_V_blk_n = res_stream_V_data_19_V_full_n;
    end else begin
        res_stream_V_data_19_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_19_V_write = 1'b1;
    end else begin
        res_stream_V_data_19_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_20_V_blk_n = res_stream_V_data_20_V_full_n;
    end else begin
        res_stream_V_data_20_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_20_V_write = 1'b1;
    end else begin
        res_stream_V_data_20_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_21_V_blk_n = res_stream_V_data_21_V_full_n;
    end else begin
        res_stream_V_data_21_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_21_V_write = 1'b1;
    end else begin
        res_stream_V_data_21_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_22_V_blk_n = res_stream_V_data_22_V_full_n;
    end else begin
        res_stream_V_data_22_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_22_V_write = 1'b1;
    end else begin
        res_stream_V_data_22_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_23_V_blk_n = res_stream_V_data_23_V_full_n;
    end else begin
        res_stream_V_data_23_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_23_V_write = 1'b1;
    end else begin
        res_stream_V_data_23_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_24_V_blk_n = res_stream_V_data_24_V_full_n;
    end else begin
        res_stream_V_data_24_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_24_V_write = 1'b1;
    end else begin
        res_stream_V_data_24_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_25_V_blk_n = res_stream_V_data_25_V_full_n;
    end else begin
        res_stream_V_data_25_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_25_V_write = 1'b1;
    end else begin
        res_stream_V_data_25_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_26_V_blk_n = res_stream_V_data_26_V_full_n;
    end else begin
        res_stream_V_data_26_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_26_V_write = 1'b1;
    end else begin
        res_stream_V_data_26_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_27_V_blk_n = res_stream_V_data_27_V_full_n;
    end else begin
        res_stream_V_data_27_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_27_V_write = 1'b1;
    end else begin
        res_stream_V_data_27_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_28_V_blk_n = res_stream_V_data_28_V_full_n;
    end else begin
        res_stream_V_data_28_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_28_V_write = 1'b1;
    end else begin
        res_stream_V_data_28_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_29_V_blk_n = res_stream_V_data_29_V_full_n;
    end else begin
        res_stream_V_data_29_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_29_V_write = 1'b1;
    end else begin
        res_stream_V_data_29_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_30_V_blk_n = res_stream_V_data_30_V_full_n;
    end else begin
        res_stream_V_data_30_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_30_V_write = 1'b1;
    end else begin
        res_stream_V_data_30_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_31_V_blk_n = res_stream_V_data_31_V_full_n;
    end else begin
        res_stream_V_data_31_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_31_V_write = 1'b1;
    end else begin
        res_stream_V_data_31_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_1153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_1153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((io_acc_block_signal_op418 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op212 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op212 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op212 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_in_fu_1159_p2 = (ap_phi_mux_i_in_0_phi_fu_1063_p4 + 4'd1);

assign icmp_ln41_fu_1153_p2 = ((ap_phi_mux_i_in_0_phi_fu_1063_p4 == 4'd10) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op212 = (data_stream_V_data_7_V_empty_n & data_stream_V_data_6_V_empty_n & data_stream_V_data_5_V_empty_n & data_stream_V_data_4_V_empty_n & data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op418 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_31_V_full_n & res_stream_V_data_30_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_29_V_full_n & res_stream_V_data_28_V_full_n & res_stream_V_data_27_V_full_n & res_stream_V_data_26_V_full_n & res_stream_V_data_25_V_full_n & res_stream_V_data_24_V_full_n & res_stream_V_data_23_V_full_n & res_stream_V_data_22_V_full_n & res_stream_V_data_21_V_full_n & res_stream_V_data_20_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_19_V_full_n & res_stream_V_data_18_V_full_n & res_stream_V_data_17_V_full_n & res_stream_V_data_16_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_0;

assign res_stream_V_data_10_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_10;

assign res_stream_V_data_11_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_11;

assign res_stream_V_data_12_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_12;

assign res_stream_V_data_13_V_din = 16'd65504;

assign res_stream_V_data_14_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_13;

assign res_stream_V_data_15_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_14;

assign res_stream_V_data_16_V_din = 16'd0;

assign res_stream_V_data_17_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_15;

assign res_stream_V_data_18_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_16;

assign res_stream_V_data_19_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_17;

assign res_stream_V_data_1_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_1;

assign res_stream_V_data_20_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_18;

assign res_stream_V_data_21_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_19;

assign res_stream_V_data_22_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_20;

assign res_stream_V_data_23_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_21;

assign res_stream_V_data_24_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_22;

assign res_stream_V_data_25_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_23;

assign res_stream_V_data_26_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_24;

assign res_stream_V_data_27_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_25;

assign res_stream_V_data_28_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_26;

assign res_stream_V_data_29_V_din = 16'd65504;

assign res_stream_V_data_2_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_2;

assign res_stream_V_data_30_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_27;

assign res_stream_V_data_31_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_28;

assign res_stream_V_data_3_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_3;

assign res_stream_V_data_4_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_4;

assign res_stream_V_data_5_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_5;

assign res_stream_V_data_6_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_6;

assign res_stream_V_data_7_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_7;

assign res_stream_V_data_8_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_8;

assign res_stream_V_data_9_V_din = grp_dense_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_fu_1071_ap_return_9;

assign start_out = real_start;

endmodule //dense_array_array_ap_fixed_16_6_5_3_0_32u_config8_s
