// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_array_ap_fixed_8u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
output  [6:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [6:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [6:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [6:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [6:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [6:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [6:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [6:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln60_reg_1627;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg   [3:0] i_0_reg_348;
wire   [0:0] icmp_ln60_fu_359_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op30;
wire    io_acc_block_signal_op215;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_365_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_34_fu_427_p3;
wire   [6:0] trunc_ln_fu_409_p4;
wire   [6:0] zext_ln415_fu_435_p1;
wire   [5:0] trunc_ln415_s_fu_439_p4;
wire   [5:0] zext_ln415_16_fu_449_p1;
wire   [6:0] add_ln415_fu_453_p2;
wire   [0:0] tmp_35_fu_465_p3;
wire   [0:0] tmp_33_fu_419_p3;
wire   [0:0] xor_ln416_fu_473_p2;
wire   [4:0] p_Result_s_fu_493_p4;
wire   [0:0] and_ln416_fu_479_p2;
wire   [0:0] icmp_ln879_fu_503_p2;
wire   [0:0] icmp_ln768_fu_509_p2;
wire   [0:0] select_ln777_fu_515_p3;
wire   [0:0] tmp_36_fu_485_p3;
wire   [0:0] xor_ln785_fu_523_p2;
wire   [0:0] or_ln340_fu_529_p2;
wire   [5:0] add_ln416_fu_459_p2;
wire   [0:0] icmp_ln1494_fu_403_p2;
wire   [5:0] select_ln340_fu_535_p3;
wire   [5:0] tmp_data_0_V_fu_543_p3;
wire   [0:0] tmp_38_fu_580_p3;
wire   [6:0] trunc_ln708_s_fu_562_p4;
wire   [6:0] zext_ln415_8_fu_588_p1;
wire   [5:0] trunc_ln415_6_fu_592_p4;
wire   [5:0] zext_ln415_17_fu_602_p1;
wire   [6:0] add_ln415_8_fu_606_p2;
wire   [0:0] tmp_39_fu_618_p3;
wire   [0:0] tmp_37_fu_572_p3;
wire   [0:0] xor_ln416_8_fu_626_p2;
wire   [4:0] p_Result_11_1_fu_646_p4;
wire   [0:0] and_ln416_8_fu_632_p2;
wire   [0:0] icmp_ln879_8_fu_656_p2;
wire   [0:0] icmp_ln768_8_fu_662_p2;
wire   [0:0] select_ln777_8_fu_668_p3;
wire   [0:0] tmp_40_fu_638_p3;
wire   [0:0] xor_ln785_1_fu_676_p2;
wire   [0:0] or_ln340_1_fu_682_p2;
wire   [5:0] add_ln416_8_fu_612_p2;
wire   [0:0] icmp_ln1494_1_fu_556_p2;
wire   [5:0] select_ln340_1_fu_688_p3;
wire   [5:0] tmp_data_1_V_fu_696_p3;
wire   [0:0] tmp_42_fu_733_p3;
wire   [6:0] trunc_ln708_2_fu_715_p4;
wire   [6:0] zext_ln415_9_fu_741_p1;
wire   [5:0] trunc_ln415_7_fu_745_p4;
wire   [5:0] zext_ln415_18_fu_755_p1;
wire   [6:0] add_ln415_9_fu_759_p2;
wire   [0:0] tmp_43_fu_771_p3;
wire   [0:0] tmp_41_fu_725_p3;
wire   [0:0] xor_ln416_9_fu_779_p2;
wire   [4:0] p_Result_11_2_fu_799_p4;
wire   [0:0] and_ln416_9_fu_785_p2;
wire   [0:0] icmp_ln879_9_fu_809_p2;
wire   [0:0] icmp_ln768_9_fu_815_p2;
wire   [0:0] select_ln777_9_fu_821_p3;
wire   [0:0] tmp_44_fu_791_p3;
wire   [0:0] xor_ln785_2_fu_829_p2;
wire   [0:0] or_ln340_2_fu_835_p2;
wire   [5:0] add_ln416_9_fu_765_p2;
wire   [0:0] icmp_ln1494_2_fu_709_p2;
wire   [5:0] select_ln340_2_fu_841_p3;
wire   [5:0] tmp_data_2_V_fu_849_p3;
wire   [0:0] tmp_46_fu_886_p3;
wire   [6:0] trunc_ln708_3_fu_868_p4;
wire   [6:0] zext_ln415_10_fu_894_p1;
wire   [5:0] trunc_ln415_8_fu_898_p4;
wire   [5:0] zext_ln415_19_fu_908_p1;
wire   [6:0] add_ln415_10_fu_912_p2;
wire   [0:0] tmp_47_fu_924_p3;
wire   [0:0] tmp_45_fu_878_p3;
wire   [0:0] xor_ln416_10_fu_932_p2;
wire   [4:0] p_Result_11_3_fu_952_p4;
wire   [0:0] and_ln416_10_fu_938_p2;
wire   [0:0] icmp_ln879_10_fu_962_p2;
wire   [0:0] icmp_ln768_10_fu_968_p2;
wire   [0:0] select_ln777_10_fu_974_p3;
wire   [0:0] tmp_48_fu_944_p3;
wire   [0:0] xor_ln785_3_fu_982_p2;
wire   [0:0] or_ln340_3_fu_988_p2;
wire   [5:0] add_ln416_10_fu_918_p2;
wire   [0:0] icmp_ln1494_3_fu_862_p2;
wire   [5:0] select_ln340_3_fu_994_p3;
wire   [5:0] tmp_data_3_V_fu_1002_p3;
wire   [0:0] tmp_50_fu_1039_p3;
wire   [6:0] trunc_ln708_4_fu_1021_p4;
wire   [6:0] zext_ln415_11_fu_1047_p1;
wire   [5:0] trunc_ln415_9_fu_1051_p4;
wire   [5:0] zext_ln415_20_fu_1061_p1;
wire   [6:0] add_ln415_11_fu_1065_p2;
wire   [0:0] tmp_51_fu_1077_p3;
wire   [0:0] tmp_49_fu_1031_p3;
wire   [0:0] xor_ln416_11_fu_1085_p2;
wire   [4:0] p_Result_11_4_fu_1105_p4;
wire   [0:0] and_ln416_11_fu_1091_p2;
wire   [0:0] icmp_ln879_11_fu_1115_p2;
wire   [0:0] icmp_ln768_11_fu_1121_p2;
wire   [0:0] select_ln777_11_fu_1127_p3;
wire   [0:0] tmp_52_fu_1097_p3;
wire   [0:0] xor_ln785_4_fu_1135_p2;
wire   [0:0] or_ln340_4_fu_1141_p2;
wire   [5:0] add_ln416_11_fu_1071_p2;
wire   [0:0] icmp_ln1494_4_fu_1015_p2;
wire   [5:0] select_ln340_4_fu_1147_p3;
wire   [5:0] tmp_data_4_V_fu_1155_p3;
wire   [0:0] tmp_54_fu_1192_p3;
wire   [6:0] trunc_ln708_5_fu_1174_p4;
wire   [6:0] zext_ln415_12_fu_1200_p1;
wire   [5:0] trunc_ln415_10_fu_1204_p4;
wire   [5:0] zext_ln415_21_fu_1214_p1;
wire   [6:0] add_ln415_12_fu_1218_p2;
wire   [0:0] tmp_55_fu_1230_p3;
wire   [0:0] tmp_53_fu_1184_p3;
wire   [0:0] xor_ln416_12_fu_1238_p2;
wire   [4:0] p_Result_11_5_fu_1258_p4;
wire   [0:0] and_ln416_12_fu_1244_p2;
wire   [0:0] icmp_ln879_12_fu_1268_p2;
wire   [0:0] icmp_ln768_12_fu_1274_p2;
wire   [0:0] select_ln777_12_fu_1280_p3;
wire   [0:0] tmp_56_fu_1250_p3;
wire   [0:0] xor_ln785_5_fu_1288_p2;
wire   [0:0] or_ln340_5_fu_1294_p2;
wire   [5:0] add_ln416_12_fu_1224_p2;
wire   [0:0] icmp_ln1494_5_fu_1168_p2;
wire   [5:0] select_ln340_5_fu_1300_p3;
wire   [5:0] tmp_data_5_V_fu_1308_p3;
wire   [0:0] tmp_58_fu_1345_p3;
wire   [6:0] trunc_ln708_6_fu_1327_p4;
wire   [6:0] zext_ln415_13_fu_1353_p1;
wire   [5:0] trunc_ln415_11_fu_1357_p4;
wire   [5:0] zext_ln415_22_fu_1367_p1;
wire   [6:0] add_ln415_13_fu_1371_p2;
wire   [0:0] tmp_59_fu_1383_p3;
wire   [0:0] tmp_57_fu_1337_p3;
wire   [0:0] xor_ln416_13_fu_1391_p2;
wire   [4:0] p_Result_11_6_fu_1411_p4;
wire   [0:0] and_ln416_13_fu_1397_p2;
wire   [0:0] icmp_ln879_13_fu_1421_p2;
wire   [0:0] icmp_ln768_13_fu_1427_p2;
wire   [0:0] select_ln777_13_fu_1433_p3;
wire   [0:0] tmp_60_fu_1403_p3;
wire   [0:0] xor_ln785_6_fu_1441_p2;
wire   [0:0] or_ln340_6_fu_1447_p2;
wire   [5:0] add_ln416_13_fu_1377_p2;
wire   [0:0] icmp_ln1494_6_fu_1321_p2;
wire   [5:0] select_ln340_6_fu_1453_p3;
wire   [5:0] tmp_data_6_V_fu_1461_p3;
wire   [0:0] tmp_62_fu_1498_p3;
wire   [6:0] trunc_ln708_7_fu_1480_p4;
wire   [6:0] zext_ln415_14_fu_1506_p1;
wire   [5:0] trunc_ln415_12_fu_1510_p4;
wire   [5:0] zext_ln415_23_fu_1520_p1;
wire   [6:0] add_ln415_14_fu_1524_p2;
wire   [0:0] tmp_63_fu_1536_p3;
wire   [0:0] tmp_61_fu_1490_p3;
wire   [0:0] xor_ln416_14_fu_1544_p2;
wire   [4:0] p_Result_11_7_fu_1564_p4;
wire   [0:0] and_ln416_14_fu_1550_p2;
wire   [0:0] icmp_ln879_14_fu_1574_p2;
wire   [0:0] icmp_ln768_14_fu_1580_p2;
wire   [0:0] select_ln777_14_fu_1586_p3;
wire   [0:0] tmp_64_fu_1556_p3;
wire   [0:0] xor_ln785_7_fu_1594_p2;
wire   [0:0] or_ln340_7_fu_1600_p2;
wire   [5:0] add_ln416_14_fu_1530_p2;
wire   [0:0] icmp_ln1494_7_fu_1474_p2;
wire   [5:0] select_ln340_7_fu_1606_p3;
wire   [5:0] tmp_data_7_V_fu_1614_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_fu_359_p2 == 1'd0))) begin
        i_0_reg_348 <= i_fu_365_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_348 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln60_reg_1627 <= icmp_ln60_fu_359_p2;
    end
end

always @ (*) begin
    if ((icmp_ln60_fu_359_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_reg_1627 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_1627 == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln60_fu_359_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln60_fu_359_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_10_fu_912_p2 = (trunc_ln708_3_fu_868_p4 + zext_ln415_10_fu_894_p1);

assign add_ln415_11_fu_1065_p2 = (trunc_ln708_4_fu_1021_p4 + zext_ln415_11_fu_1047_p1);

assign add_ln415_12_fu_1218_p2 = (trunc_ln708_5_fu_1174_p4 + zext_ln415_12_fu_1200_p1);

assign add_ln415_13_fu_1371_p2 = (trunc_ln708_6_fu_1327_p4 + zext_ln415_13_fu_1353_p1);

assign add_ln415_14_fu_1524_p2 = (trunc_ln708_7_fu_1480_p4 + zext_ln415_14_fu_1506_p1);

assign add_ln415_8_fu_606_p2 = (trunc_ln708_s_fu_562_p4 + zext_ln415_8_fu_588_p1);

assign add_ln415_9_fu_759_p2 = (trunc_ln708_2_fu_715_p4 + zext_ln415_9_fu_741_p1);

assign add_ln415_fu_453_p2 = (trunc_ln_fu_409_p4 + zext_ln415_fu_435_p1);

assign add_ln416_10_fu_918_p2 = (trunc_ln415_8_fu_898_p4 + zext_ln415_19_fu_908_p1);

assign add_ln416_11_fu_1071_p2 = (trunc_ln415_9_fu_1051_p4 + zext_ln415_20_fu_1061_p1);

assign add_ln416_12_fu_1224_p2 = (trunc_ln415_10_fu_1204_p4 + zext_ln415_21_fu_1214_p1);

assign add_ln416_13_fu_1377_p2 = (trunc_ln415_11_fu_1357_p4 + zext_ln415_22_fu_1367_p1);

assign add_ln416_14_fu_1530_p2 = (trunc_ln415_12_fu_1510_p4 + zext_ln415_23_fu_1520_p1);

assign add_ln416_8_fu_612_p2 = (trunc_ln415_6_fu_592_p4 + zext_ln415_17_fu_602_p1);

assign add_ln416_9_fu_765_p2 = (trunc_ln415_7_fu_745_p4 + zext_ln415_18_fu_755_p1);

assign add_ln416_fu_459_p2 = (trunc_ln415_s_fu_439_p4 + zext_ln415_16_fu_449_p1);

assign and_ln416_10_fu_938_p2 = (xor_ln416_10_fu_932_p2 & tmp_45_fu_878_p3);

assign and_ln416_11_fu_1091_p2 = (xor_ln416_11_fu_1085_p2 & tmp_49_fu_1031_p3);

assign and_ln416_12_fu_1244_p2 = (xor_ln416_12_fu_1238_p2 & tmp_53_fu_1184_p3);

assign and_ln416_13_fu_1397_p2 = (xor_ln416_13_fu_1391_p2 & tmp_57_fu_1337_p3);

assign and_ln416_14_fu_1550_p2 = (xor_ln416_14_fu_1544_p2 & tmp_61_fu_1490_p3);

assign and_ln416_8_fu_632_p2 = (xor_ln416_8_fu_626_p2 & tmp_37_fu_572_p3);

assign and_ln416_9_fu_785_p2 = (xor_ln416_9_fu_779_p2 & tmp_41_fu_725_p3);

assign and_ln416_fu_479_p2 = (xor_ln416_fu_473_p2 & tmp_33_fu_419_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op215 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0)) | ((io_acc_block_signal_op30 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op215 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0)) | ((io_acc_block_signal_op30 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op215 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0)) | ((io_acc_block_signal_op30 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((io_acc_block_signal_op215 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0)) | ((io_acc_block_signal_op30 == 1'b0) & (icmp_ln60_reg_1627 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_365_p2 = (i_0_reg_348 + 4'd1);

assign icmp_ln1494_1_fu_556_p2 = (($signed(data_V_data_1_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_709_p2 = (($signed(data_V_data_2_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_862_p2 = (($signed(data_V_data_3_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1015_p2 = (($signed(data_V_data_4_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1168_p2 = (($signed(data_V_data_5_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1321_p2 = (($signed(data_V_data_6_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1474_p2 = (($signed(data_V_data_7_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_403_p2 = (($signed(data_V_data_0_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_359_p2 = ((i_0_reg_348 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln768_10_fu_968_p2 = ((p_Result_11_3_fu_952_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_11_fu_1121_p2 = ((p_Result_11_4_fu_1105_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_12_fu_1274_p2 = ((p_Result_11_5_fu_1258_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_13_fu_1427_p2 = ((p_Result_11_6_fu_1411_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_14_fu_1580_p2 = ((p_Result_11_7_fu_1564_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_8_fu_662_p2 = ((p_Result_11_1_fu_646_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_9_fu_815_p2 = ((p_Result_11_2_fu_799_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_509_p2 = ((p_Result_s_fu_493_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_10_fu_962_p2 = ((p_Result_11_3_fu_952_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_11_fu_1115_p2 = ((p_Result_11_4_fu_1105_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_12_fu_1268_p2 = ((p_Result_11_5_fu_1258_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_13_fu_1421_p2 = ((p_Result_11_6_fu_1411_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_14_fu_1574_p2 = ((p_Result_11_7_fu_1564_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_656_p2 = ((p_Result_11_1_fu_646_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_809_p2 = ((p_Result_11_2_fu_799_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_503_p2 = ((p_Result_s_fu_493_p4 == 5'd31) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op215 = (res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op30 = (data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln340_1_fu_682_p2 = (xor_ln785_1_fu_676_p2 | tmp_40_fu_638_p3);

assign or_ln340_2_fu_835_p2 = (xor_ln785_2_fu_829_p2 | tmp_44_fu_791_p3);

assign or_ln340_3_fu_988_p2 = (xor_ln785_3_fu_982_p2 | tmp_48_fu_944_p3);

assign or_ln340_4_fu_1141_p2 = (xor_ln785_4_fu_1135_p2 | tmp_52_fu_1097_p3);

assign or_ln340_5_fu_1294_p2 = (xor_ln785_5_fu_1288_p2 | tmp_56_fu_1250_p3);

assign or_ln340_6_fu_1447_p2 = (xor_ln785_6_fu_1441_p2 | tmp_60_fu_1403_p3);

assign or_ln340_7_fu_1600_p2 = (xor_ln785_7_fu_1594_p2 | tmp_64_fu_1556_p3);

assign or_ln340_fu_529_p2 = (xor_ln785_fu_523_p2 | tmp_36_fu_485_p3);

assign p_Result_11_1_fu_646_p4 = {{data_V_data_1_V_dout[15:11]}};

assign p_Result_11_2_fu_799_p4 = {{data_V_data_2_V_dout[15:11]}};

assign p_Result_11_3_fu_952_p4 = {{data_V_data_3_V_dout[15:11]}};

assign p_Result_11_4_fu_1105_p4 = {{data_V_data_4_V_dout[15:11]}};

assign p_Result_11_5_fu_1258_p4 = {{data_V_data_5_V_dout[15:11]}};

assign p_Result_11_6_fu_1411_p4 = {{data_V_data_6_V_dout[15:11]}};

assign p_Result_11_7_fu_1564_p4 = {{data_V_data_7_V_dout[15:11]}};

assign p_Result_s_fu_493_p4 = {{data_V_data_0_V_dout[15:11]}};

assign res_V_data_0_V_din = tmp_data_0_V_fu_543_p3;

assign res_V_data_1_V_din = tmp_data_1_V_fu_696_p3;

assign res_V_data_2_V_din = tmp_data_2_V_fu_849_p3;

assign res_V_data_3_V_din = tmp_data_3_V_fu_1002_p3;

assign res_V_data_4_V_din = tmp_data_4_V_fu_1155_p3;

assign res_V_data_5_V_din = tmp_data_5_V_fu_1308_p3;

assign res_V_data_6_V_din = tmp_data_6_V_fu_1461_p3;

assign res_V_data_7_V_din = tmp_data_7_V_fu_1614_p3;

assign select_ln340_1_fu_688_p3 = ((or_ln340_1_fu_682_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_8_fu_612_p2);

assign select_ln340_2_fu_841_p3 = ((or_ln340_2_fu_835_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_9_fu_765_p2);

assign select_ln340_3_fu_994_p3 = ((or_ln340_3_fu_988_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_10_fu_918_p2);

assign select_ln340_4_fu_1147_p3 = ((or_ln340_4_fu_1141_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_11_fu_1071_p2);

assign select_ln340_5_fu_1300_p3 = ((or_ln340_5_fu_1294_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_12_fu_1224_p2);

assign select_ln340_6_fu_1453_p3 = ((or_ln340_6_fu_1447_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_13_fu_1377_p2);

assign select_ln340_7_fu_1606_p3 = ((or_ln340_7_fu_1600_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_14_fu_1530_p2);

assign select_ln340_fu_535_p3 = ((or_ln340_fu_529_p2[0:0] === 1'b1) ? 6'd63 : add_ln416_fu_459_p2);

assign select_ln777_10_fu_974_p3 = ((and_ln416_10_fu_938_p2[0:0] === 1'b1) ? icmp_ln879_10_fu_962_p2 : icmp_ln768_10_fu_968_p2);

assign select_ln777_11_fu_1127_p3 = ((and_ln416_11_fu_1091_p2[0:0] === 1'b1) ? icmp_ln879_11_fu_1115_p2 : icmp_ln768_11_fu_1121_p2);

assign select_ln777_12_fu_1280_p3 = ((and_ln416_12_fu_1244_p2[0:0] === 1'b1) ? icmp_ln879_12_fu_1268_p2 : icmp_ln768_12_fu_1274_p2);

assign select_ln777_13_fu_1433_p3 = ((and_ln416_13_fu_1397_p2[0:0] === 1'b1) ? icmp_ln879_13_fu_1421_p2 : icmp_ln768_13_fu_1427_p2);

assign select_ln777_14_fu_1586_p3 = ((and_ln416_14_fu_1550_p2[0:0] === 1'b1) ? icmp_ln879_14_fu_1574_p2 : icmp_ln768_14_fu_1580_p2);

assign select_ln777_8_fu_668_p3 = ((and_ln416_8_fu_632_p2[0:0] === 1'b1) ? icmp_ln879_8_fu_656_p2 : icmp_ln768_8_fu_662_p2);

assign select_ln777_9_fu_821_p3 = ((and_ln416_9_fu_785_p2[0:0] === 1'b1) ? icmp_ln879_9_fu_809_p2 : icmp_ln768_9_fu_815_p2);

assign select_ln777_fu_515_p3 = ((and_ln416_fu_479_p2[0:0] === 1'b1) ? icmp_ln879_fu_503_p2 : icmp_ln768_fu_509_p2);

assign start_out = real_start;

assign tmp_33_fu_419_p3 = data_V_data_0_V_dout[32'd10];

assign tmp_34_fu_427_p3 = data_V_data_0_V_dout[32'd3];

assign tmp_35_fu_465_p3 = add_ln415_fu_453_p2[32'd6];

assign tmp_36_fu_485_p3 = add_ln415_fu_453_p2[32'd6];

assign tmp_37_fu_572_p3 = data_V_data_1_V_dout[32'd10];

assign tmp_38_fu_580_p3 = data_V_data_1_V_dout[32'd3];

assign tmp_39_fu_618_p3 = add_ln415_8_fu_606_p2[32'd6];

assign tmp_40_fu_638_p3 = add_ln415_8_fu_606_p2[32'd6];

assign tmp_41_fu_725_p3 = data_V_data_2_V_dout[32'd10];

assign tmp_42_fu_733_p3 = data_V_data_2_V_dout[32'd3];

assign tmp_43_fu_771_p3 = add_ln415_9_fu_759_p2[32'd6];

assign tmp_44_fu_791_p3 = add_ln415_9_fu_759_p2[32'd6];

assign tmp_45_fu_878_p3 = data_V_data_3_V_dout[32'd10];

assign tmp_46_fu_886_p3 = data_V_data_3_V_dout[32'd3];

assign tmp_47_fu_924_p3 = add_ln415_10_fu_912_p2[32'd6];

assign tmp_48_fu_944_p3 = add_ln415_10_fu_912_p2[32'd6];

assign tmp_49_fu_1031_p3 = data_V_data_4_V_dout[32'd10];

assign tmp_50_fu_1039_p3 = data_V_data_4_V_dout[32'd3];

assign tmp_51_fu_1077_p3 = add_ln415_11_fu_1065_p2[32'd6];

assign tmp_52_fu_1097_p3 = add_ln415_11_fu_1065_p2[32'd6];

assign tmp_53_fu_1184_p3 = data_V_data_5_V_dout[32'd10];

assign tmp_54_fu_1192_p3 = data_V_data_5_V_dout[32'd3];

assign tmp_55_fu_1230_p3 = add_ln415_12_fu_1218_p2[32'd6];

assign tmp_56_fu_1250_p3 = add_ln415_12_fu_1218_p2[32'd6];

assign tmp_57_fu_1337_p3 = data_V_data_6_V_dout[32'd10];

assign tmp_58_fu_1345_p3 = data_V_data_6_V_dout[32'd3];

assign tmp_59_fu_1383_p3 = add_ln415_13_fu_1371_p2[32'd6];

assign tmp_60_fu_1403_p3 = add_ln415_13_fu_1371_p2[32'd6];

assign tmp_61_fu_1490_p3 = data_V_data_7_V_dout[32'd10];

assign tmp_62_fu_1498_p3 = data_V_data_7_V_dout[32'd3];

assign tmp_63_fu_1536_p3 = add_ln415_14_fu_1524_p2[32'd6];

assign tmp_64_fu_1556_p3 = add_ln415_14_fu_1524_p2[32'd6];

assign tmp_data_0_V_fu_543_p3 = ((icmp_ln1494_fu_403_p2[0:0] === 1'b1) ? select_ln340_fu_535_p3 : 6'd0);

assign tmp_data_1_V_fu_696_p3 = ((icmp_ln1494_1_fu_556_p2[0:0] === 1'b1) ? select_ln340_1_fu_688_p3 : 6'd0);

assign tmp_data_2_V_fu_849_p3 = ((icmp_ln1494_2_fu_709_p2[0:0] === 1'b1) ? select_ln340_2_fu_841_p3 : 6'd0);

assign tmp_data_3_V_fu_1002_p3 = ((icmp_ln1494_3_fu_862_p2[0:0] === 1'b1) ? select_ln340_3_fu_994_p3 : 6'd0);

assign tmp_data_4_V_fu_1155_p3 = ((icmp_ln1494_4_fu_1015_p2[0:0] === 1'b1) ? select_ln340_4_fu_1147_p3 : 6'd0);

assign tmp_data_5_V_fu_1308_p3 = ((icmp_ln1494_5_fu_1168_p2[0:0] === 1'b1) ? select_ln340_5_fu_1300_p3 : 6'd0);

assign tmp_data_6_V_fu_1461_p3 = ((icmp_ln1494_6_fu_1321_p2[0:0] === 1'b1) ? select_ln340_6_fu_1453_p3 : 6'd0);

assign tmp_data_7_V_fu_1614_p3 = ((icmp_ln1494_7_fu_1474_p2[0:0] === 1'b1) ? select_ln340_7_fu_1606_p3 : 6'd0);

assign trunc_ln415_10_fu_1204_p4 = {{data_V_data_5_V_dout[9:4]}};

assign trunc_ln415_11_fu_1357_p4 = {{data_V_data_6_V_dout[9:4]}};

assign trunc_ln415_12_fu_1510_p4 = {{data_V_data_7_V_dout[9:4]}};

assign trunc_ln415_6_fu_592_p4 = {{data_V_data_1_V_dout[9:4]}};

assign trunc_ln415_7_fu_745_p4 = {{data_V_data_2_V_dout[9:4]}};

assign trunc_ln415_8_fu_898_p4 = {{data_V_data_3_V_dout[9:4]}};

assign trunc_ln415_9_fu_1051_p4 = {{data_V_data_4_V_dout[9:4]}};

assign trunc_ln415_s_fu_439_p4 = {{data_V_data_0_V_dout[9:4]}};

assign trunc_ln708_2_fu_715_p4 = {{data_V_data_2_V_dout[10:4]}};

assign trunc_ln708_3_fu_868_p4 = {{data_V_data_3_V_dout[10:4]}};

assign trunc_ln708_4_fu_1021_p4 = {{data_V_data_4_V_dout[10:4]}};

assign trunc_ln708_5_fu_1174_p4 = {{data_V_data_5_V_dout[10:4]}};

assign trunc_ln708_6_fu_1327_p4 = {{data_V_data_6_V_dout[10:4]}};

assign trunc_ln708_7_fu_1480_p4 = {{data_V_data_7_V_dout[10:4]}};

assign trunc_ln708_s_fu_562_p4 = {{data_V_data_1_V_dout[10:4]}};

assign trunc_ln_fu_409_p4 = {{data_V_data_0_V_dout[10:4]}};

assign xor_ln416_10_fu_932_p2 = (tmp_47_fu_924_p3 ^ 1'd1);

assign xor_ln416_11_fu_1085_p2 = (tmp_51_fu_1077_p3 ^ 1'd1);

assign xor_ln416_12_fu_1238_p2 = (tmp_55_fu_1230_p3 ^ 1'd1);

assign xor_ln416_13_fu_1391_p2 = (tmp_59_fu_1383_p3 ^ 1'd1);

assign xor_ln416_14_fu_1544_p2 = (tmp_63_fu_1536_p3 ^ 1'd1);

assign xor_ln416_8_fu_626_p2 = (tmp_39_fu_618_p3 ^ 1'd1);

assign xor_ln416_9_fu_779_p2 = (tmp_43_fu_771_p3 ^ 1'd1);

assign xor_ln416_fu_473_p2 = (tmp_35_fu_465_p3 ^ 1'd1);

assign xor_ln785_1_fu_676_p2 = (select_ln777_8_fu_668_p3 ^ 1'd1);

assign xor_ln785_2_fu_829_p2 = (select_ln777_9_fu_821_p3 ^ 1'd1);

assign xor_ln785_3_fu_982_p2 = (select_ln777_10_fu_974_p3 ^ 1'd1);

assign xor_ln785_4_fu_1135_p2 = (select_ln777_11_fu_1127_p3 ^ 1'd1);

assign xor_ln785_5_fu_1288_p2 = (select_ln777_12_fu_1280_p3 ^ 1'd1);

assign xor_ln785_6_fu_1441_p2 = (select_ln777_13_fu_1433_p3 ^ 1'd1);

assign xor_ln785_7_fu_1594_p2 = (select_ln777_14_fu_1586_p3 ^ 1'd1);

assign xor_ln785_fu_523_p2 = (select_ln777_fu_515_p3 ^ 1'd1);

assign zext_ln415_10_fu_894_p1 = tmp_46_fu_886_p3;

assign zext_ln415_11_fu_1047_p1 = tmp_50_fu_1039_p3;

assign zext_ln415_12_fu_1200_p1 = tmp_54_fu_1192_p3;

assign zext_ln415_13_fu_1353_p1 = tmp_58_fu_1345_p3;

assign zext_ln415_14_fu_1506_p1 = tmp_62_fu_1498_p3;

assign zext_ln415_16_fu_449_p1 = tmp_34_fu_427_p3;

assign zext_ln415_17_fu_602_p1 = tmp_38_fu_580_p3;

assign zext_ln415_18_fu_755_p1 = tmp_42_fu_733_p3;

assign zext_ln415_19_fu_908_p1 = tmp_46_fu_886_p3;

assign zext_ln415_20_fu_1061_p1 = tmp_50_fu_1039_p3;

assign zext_ln415_21_fu_1214_p1 = tmp_54_fu_1192_p3;

assign zext_ln415_22_fu_1367_p1 = tmp_58_fu_1345_p3;

assign zext_ln415_23_fu_1520_p1 = tmp_62_fu_1498_p3;

assign zext_ln415_8_fu_588_p1 = tmp_38_fu_580_p3;

assign zext_ln415_9_fu_741_p1 = tmp_42_fu_733_p3;

assign zext_ln415_fu_435_p1 = tmp_34_fu_427_p3;

endmodule //relu_array_array_ap_fixed_8u_relu_config4_s
