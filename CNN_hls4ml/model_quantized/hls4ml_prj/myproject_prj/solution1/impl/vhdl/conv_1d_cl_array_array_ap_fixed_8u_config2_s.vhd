-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1d_cl_array_array_ap_fixed_8u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_TVALID : IN STD_LOGIC;
    data_V_data_V_TREADY : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_1d_cl_array_array_ap_fixed_8u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_C0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011000000";
    constant ap_const_lv22_3FFFD6 : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111010110";
    constant ap_const_lv22_3A : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000111010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv16_E0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_FFE0 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111100000";
    constant ap_const_lv16_20 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_const_lv16_280 : STD_LOGIC_VECTOR (15 downto 0) := "0000001010000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_V_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln50_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal p_Result_s_reg_1333 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1333_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_6_V_blk_n : STD_LOGIC;
    signal res_V_data_7_V_blk_n : STD_LOGIC;
    signal wp_idx_reg_413 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal data_window_0_V_V_full_n : STD_LOGIC;
    signal data_window_0_V_V_write : STD_LOGIC;
    signal trunc_ln13_reg_1309 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_window_1_V_V_full_n : STD_LOGIC;
    signal data_window_1_V_V_write : STD_LOGIC;
    signal tmp_327_reg_1321 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_window_2_V_V_full_n : STD_LOGIC;
    signal data_window_2_V_V_write : STD_LOGIC;
    signal tmp_328_reg_1325 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_window_3_V_V_full_n : STD_LOGIC;
    signal data_window_3_V_V_write : STD_LOGIC;
    signal tmp_329_reg_1329 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal data_window_0_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data_window_0_V_V_empty_n : STD_LOGIC;
    signal data_window_0_V_V_read : STD_LOGIC;
    signal p_Result_s_reg_1333_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_window_1_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data_window_1_V_V_empty_n : STD_LOGIC;
    signal data_window_1_V_V_read : STD_LOGIC;
    signal data_window_2_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data_window_2_V_V_empty_n : STD_LOGIC;
    signal data_window_2_V_V_read : STD_LOGIC;
    signal data_window_3_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal data_window_3_V_V_empty_n : STD_LOGIC;
    signal data_window_3_V_V_read : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal io_acc_block_signal_op123 : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_iw_fu_868_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_fu_952_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_4_reg_1313 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_1337 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_70_reg_1344 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_71_reg_1350 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_72_reg_1357 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln1118_106_fu_426_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_107_fu_432_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_455_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_fu_880_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln23_fu_884_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_326_fu_890_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln25_fu_906_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln24_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_910_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln13_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_916_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_fu_932_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_fu_932_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1118_s_fu_999_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_1072_fu_1006_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_fu_992_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_fu_1010_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_fu_455_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1118_508_fu_1036_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_1073_fu_1043_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1118_509_fu_1053_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1118_534_fu_1047_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1074_fu_1060_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_535_fu_1064_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1118_510_fu_1084_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1118_511_fu_1095_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_1077_fu_1102_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1076_fu_1091_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1118_fu_1106_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_106_fu_426_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1118_107_fu_432_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1118_512_fu_1146_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_1079_fu_1153_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_536_fu_1157_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1118_513_fu_1173_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_1080_fu_1180_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1118_514_fu_1190_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1118_537_fu_1184_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_1081_fu_1197_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1118_538_fu_1201_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln708_797_fu_1207_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_s_fu_1026_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_792_fu_1070_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln9_fu_1016_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_937_fu_1228_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_793_fu_1112_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_794_fu_1122_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_795_fu_1136_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_796_fu_1163_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_fu_1217_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal data_V_data_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_data_V_TVALID_int : STD_LOGIC;
    signal data_V_data_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_V_data_V_U_ack_in : STD_LOGIC;

    component myproject_mux_73_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (3 downto 0);
        din5 : IN STD_LOGIC_VECTOR (3 downto 0);
        din6 : IN STD_LOGIC_VECTOR (3 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component fifo_w16_d13_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    myproject_mux_73_4_1_1_U3 : component myproject_mux_73_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 4,
        din5_WIDTH => 4,
        din6_WIDTH => 4,
        din7_WIDTH => 3,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_1,
        din1 => ap_const_lv4_3,
        din2 => ap_const_lv4_7,
        din3 => ap_const_lv4_F,
        din4 => ap_const_lv4_E,
        din5 => ap_const_lv4_C,
        din6 => ap_const_lv4_8,
        din7 => p_Val2_s_fu_932_p8,
        dout => p_Val2_s_fu_932_p9);

    data_window_0_V_V_fifo_U : component fifo_w16_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_data_0_V_4_reg_1313,
        if_full_n => data_window_0_V_V_full_n,
        if_write => data_window_0_V_V_write,
        if_dout => data_window_0_V_V_dout,
        if_empty_n => data_window_0_V_V_empty_n,
        if_read => data_window_0_V_V_read);

    data_window_1_V_V_fifo_U : component fifo_w16_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_data_0_V_4_reg_1313,
        if_full_n => data_window_1_V_V_full_n,
        if_write => data_window_1_V_V_write,
        if_dout => data_window_1_V_V_dout,
        if_empty_n => data_window_1_V_V_empty_n,
        if_read => data_window_1_V_V_read);

    data_window_2_V_V_fifo_U : component fifo_w16_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_data_0_V_4_reg_1313,
        if_full_n => data_window_2_V_V_full_n,
        if_write => data_window_2_V_V_write,
        if_dout => data_window_2_V_V_dout,
        if_empty_n => data_window_2_V_V_empty_n,
        if_read => data_window_2_V_V_read);

    data_window_3_V_V_fifo_U : component fifo_w16_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_data_0_V_4_reg_1313,
        if_full_n => data_window_3_V_V_full_n,
        if_write => data_window_3_V_V_write,
        if_dout => data_window_3_V_V_dout,
        if_empty_n => data_window_3_V_V_empty_n,
        if_read => data_window_3_V_V_read);

    regslice_both_data_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_V_data_V_TDATA,
        vld_in => data_V_data_V_TVALID,
        ack_in => regslice_both_data_V_data_V_U_ack_in,
        data_out => data_V_data_V_TDATA_int,
        vld_out => data_V_data_V_TVALID_int,
        ack_out => data_V_data_V_TREADY_int,
        apdone_blk => regslice_both_data_V_data_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    wp_idx_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                wp_idx_reg_413 <= ap_const_lv5_0;
            elsif (((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wp_idx_reg_413 <= i_iw_fu_868_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_s_reg_1333 <= p_Val2_s_fu_932_p9(3 downto 3);
                tmp_327_reg_1321 <= p_Val2_s_fu_932_p9(1 downto 1);
                tmp_328_reg_1325 <= p_Val2_s_fu_932_p9(2 downto 2);
                tmp_329_reg_1329 <= p_Val2_s_fu_932_p9(3 downto 3);
                tmp_data_0_V_4_reg_1313 <= data_V_data_V_TDATA_int;
                trunc_ln13_reg_1309 <= trunc_ln13_fu_952_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_s_reg_1333_pp0_iter1_reg <= p_Result_s_reg_1333;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                p_Result_s_reg_1333_pp0_iter2_reg <= p_Result_s_reg_1333_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_70_reg_1344 <= data_window_1_V_V_dout;
                tmp_V_71_reg_1350 <= data_window_2_V_V_dout;
                tmp_V_72_reg_1357 <= data_window_3_V_V_dout;
                tmp_V_reg_1337 <= data_window_0_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln50_fu_862_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln50_fu_862_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)) or ((icmp_ln50_fu_862_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1118_fu_1106_p2 <= std_logic_vector(signed(sext_ln1118_1077_fu_1102_p1) + signed(sext_ln1118_1076_fu_1091_p1));
    add_ln24_fu_910_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(trunc_ln25_fu_906_p1));
    add_ln703_937_fu_1228_p2 <= std_logic_vector(unsigned(trunc_ln708_792_fu_1070_p4) + unsigned(ap_const_lv16_100));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln50_fu_862_p2, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, data_window_0_V_V_full_n, trunc_ln13_reg_1309, data_window_1_V_V_full_n, tmp_327_reg_1321, data_window_2_V_V_full_n, tmp_328_reg_1325, data_window_3_V_V_full_n, tmp_329_reg_1329, ap_enable_reg_pp0_iter1, data_window_0_V_V_empty_n, p_Result_s_reg_1333_pp0_iter1_reg, data_window_1_V_V_empty_n, data_window_2_V_V_empty_n, data_window_3_V_V_empty_n, ap_enable_reg_pp0_iter2, io_acc_block_signal_op123, data_V_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (io_acc_block_signal_op123 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_3_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_2_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_1_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_0_V_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_329_reg_1329 = ap_const_lv1_1) and (data_window_3_V_V_full_n = ap_const_logic_0)) or ((tmp_328_reg_1325 = ap_const_lv1_1) and (data_window_2_V_V_full_n = ap_const_logic_0)) or ((tmp_327_reg_1321 = ap_const_lv1_1) and (data_window_1_V_V_full_n = ap_const_logic_0)) or ((trunc_ln13_reg_1309 = ap_const_lv1_1) and (data_window_0_V_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln50_fu_862_p2, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, data_window_0_V_V_full_n, trunc_ln13_reg_1309, data_window_1_V_V_full_n, tmp_327_reg_1321, data_window_2_V_V_full_n, tmp_328_reg_1325, data_window_3_V_V_full_n, tmp_329_reg_1329, ap_enable_reg_pp0_iter1, data_window_0_V_V_empty_n, p_Result_s_reg_1333_pp0_iter1_reg, data_window_1_V_V_empty_n, data_window_2_V_V_empty_n, data_window_3_V_V_empty_n, ap_enable_reg_pp0_iter2, io_acc_block_signal_op123, data_V_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (io_acc_block_signal_op123 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_3_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_2_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_1_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_0_V_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_329_reg_1329 = ap_const_lv1_1) and (data_window_3_V_V_full_n = ap_const_logic_0)) or ((tmp_328_reg_1325 = ap_const_lv1_1) and (data_window_2_V_V_full_n = ap_const_logic_0)) or ((tmp_327_reg_1321 = ap_const_lv1_1) and (data_window_1_V_V_full_n = ap_const_logic_0)) or ((trunc_ln13_reg_1309 = ap_const_lv1_1) and (data_window_0_V_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln50_fu_862_p2, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, data_window_0_V_V_full_n, trunc_ln13_reg_1309, data_window_1_V_V_full_n, tmp_327_reg_1321, data_window_2_V_V_full_n, tmp_328_reg_1325, data_window_3_V_V_full_n, tmp_329_reg_1329, ap_enable_reg_pp0_iter1, data_window_0_V_V_empty_n, p_Result_s_reg_1333_pp0_iter1_reg, data_window_1_V_V_empty_n, data_window_2_V_V_empty_n, data_window_3_V_V_empty_n, ap_enable_reg_pp0_iter2, io_acc_block_signal_op123, data_V_data_V_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (io_acc_block_signal_op123 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_3_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_2_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_1_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_0_V_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_329_reg_1329 = ap_const_lv1_1) and (data_window_3_V_V_full_n = ap_const_logic_0)) or ((tmp_328_reg_1325 = ap_const_lv1_1) and (data_window_2_V_V_full_n = ap_const_logic_0)) or ((tmp_327_reg_1321 = ap_const_lv1_1) and (data_window_1_V_V_full_n = ap_const_logic_0)) or ((trunc_ln13_reg_1309 = ap_const_lv1_1) and (data_window_0_V_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln50_fu_862_p2, data_V_data_V_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (data_V_data_V_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_window_0_V_V_full_n, trunc_ln13_reg_1309, data_window_1_V_V_full_n, tmp_327_reg_1321, data_window_2_V_V_full_n, tmp_328_reg_1325, data_window_3_V_V_full_n, tmp_329_reg_1329)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((tmp_329_reg_1329 = ap_const_lv1_1) and (data_window_3_V_V_full_n = ap_const_logic_0)) or ((tmp_328_reg_1325 = ap_const_lv1_1) and (data_window_2_V_V_full_n = ap_const_logic_0)) or ((tmp_327_reg_1321 = ap_const_lv1_1) and (data_window_1_V_V_full_n = ap_const_logic_0)) or ((trunc_ln13_reg_1309 = ap_const_lv1_1) and (data_window_0_V_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(data_window_0_V_V_empty_n, p_Result_s_reg_1333_pp0_iter1_reg, data_window_1_V_V_empty_n, data_window_2_V_V_empty_n, data_window_3_V_V_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter2 <= (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_3_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_2_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_1_V_V_empty_n = ap_const_logic_0)) or ((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (data_window_0_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter3_assign_proc : process(p_Result_s_reg_1333_pp0_iter2_reg, io_acc_block_signal_op123)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (io_acc_block_signal_op123 = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln50_fu_862_p2)
    begin
        if ((icmp_ln50_fu_862_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_data_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln50_fu_862_p2, data_V_data_V_TVALID_int)
    begin
        if (((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_V_TDATA_blk_n <= data_V_data_V_TVALID_int;
        else 
            data_V_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_TREADY_assign_proc : process(data_V_data_V_TVALID, regslice_both_data_V_data_V_U_ack_in)
    begin
        if (((regslice_both_data_V_data_V_U_ack_in = ap_const_logic_1) and (data_V_data_V_TVALID = ap_const_logic_1))) then 
            data_V_data_V_TREADY <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln50_fu_862_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln50_fu_862_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_V_TREADY_int <= ap_const_logic_1;
        else 
            data_V_data_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data_window_0_V_V_read_assign_proc : process(p_Result_s_reg_1333_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_0_V_V_read <= ap_const_logic_1;
        else 
            data_window_0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_window_0_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, trunc_ln13_reg_1309, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln13_reg_1309 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_0_V_V_write <= ap_const_logic_1;
        else 
            data_window_0_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_window_1_V_V_read_assign_proc : process(p_Result_s_reg_1333_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_1_V_V_read <= ap_const_logic_1;
        else 
            data_window_1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_window_1_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_327_reg_1321, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_327_reg_1321 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_1_V_V_write <= ap_const_logic_1;
        else 
            data_window_1_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_window_2_V_V_read_assign_proc : process(p_Result_s_reg_1333_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_2_V_V_read <= ap_const_logic_1;
        else 
            data_window_2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_window_2_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_328_reg_1325, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_328_reg_1325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_2_V_V_write <= ap_const_logic_1;
        else 
            data_window_2_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_window_3_V_V_read_assign_proc : process(p_Result_s_reg_1333_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_3_V_V_read <= ap_const_logic_1;
        else 
            data_window_3_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_window_3_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_329_reg_1329, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_329_reg_1329 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_window_3_V_V_write <= ap_const_logic_1;
        else 
            data_window_3_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_iw_fu_868_p2 <= std_logic_vector(unsigned(wp_idx_reg_413) + unsigned(ap_const_lv5_1));
    icmp_ln13_fu_874_p2 <= "1" when (unsigned(wp_idx_reg_413) < unsigned(ap_const_lv5_3)) else "0";
    icmp_ln24_fu_900_p2 <= "1" when (tmp_326_fu_890_p4 = ap_const_lv2_0) else "0";
    icmp_ln50_fu_862_p2 <= "1" when (wp_idx_reg_413 = ap_const_lv5_10) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op123 <= (res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    mul_ln1118_106_fu_426_p0 <= tmp_V_71_reg_1350;
    mul_ln1118_106_fu_426_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_106_fu_426_p0) * signed(ap_const_lv22_3FFFD6))), 22));
    mul_ln1118_107_fu_432_p0 <= tmp_V_72_reg_1357;
    mul_ln1118_107_fu_432_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_107_fu_432_p0) * signed(ap_const_lv22_3FFFD6))), 22));
    mul_ln1118_fu_455_p0 <= tmp_V_reg_1337;
    mul_ln1118_fu_455_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_455_p0) * signed('0' &ap_const_lv22_3A))), 22));
    p_Val2_s_fu_932_p8 <= 
        trunc_ln25_fu_906_p1 when (icmp_ln13_fu_874_p2(0) = '1') else 
        select_ln24_fu_916_p3;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= std_logic_vector(unsigned(trunc_ln708_793_fu_1112_p4) + unsigned(ap_const_lv16_FFE0));

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= std_logic_vector(unsigned(trunc_ln9_fu_1016_p4) + unsigned(add_ln703_937_fu_1228_p2));

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= ap_const_lv16_C0;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= std_logic_vector(unsigned(trunc_ln708_795_fu_1136_p4) + unsigned(ap_const_lv16_20));

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= std_logic_vector(unsigned(trunc_ln708_796_fu_1163_p4) + unsigned(ap_const_lv16_C0));

    res_V_data_4_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= std_logic_vector(unsigned(trunc_ln708_794_fu_1122_p4) + unsigned(ap_const_lv16_C0));

    res_V_data_5_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(res_V_data_6_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_din <= std_logic_vector(signed(sext_ln708_fu_1217_p1) + signed(ap_const_lv16_280));

    res_V_data_6_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(res_V_data_7_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_din <= std_logic_vector(unsigned(trunc_ln708_s_fu_1026_p4) + unsigned(ap_const_lv16_E0));

    res_V_data_7_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, p_Result_s_reg_1333_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((p_Result_s_reg_1333_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_fu_916_p3 <= 
        add_ln24_fu_910_p2 when (icmp_ln24_fu_900_p2(0) = '1') else 
        ap_const_lv3_3;
        sext_ln1118_1072_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_999_p3),22));

        sext_ln1118_1073_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_508_fu_1036_p3),22));

        sext_ln1118_1074_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_509_fu_1053_p3),22));

        sext_ln1118_1076_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_510_fu_1084_p3),22));

        sext_ln1118_1077_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_511_fu_1095_p3),22));

        sext_ln1118_1079_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_512_fu_1146_p3),22));

        sext_ln1118_1080_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_513_fu_1173_p3),21));

        sext_ln1118_1081_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_514_fu_1190_p3),21));

        sext_ln708_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_797_fu_1207_p4),16));

    shl_ln1118_508_fu_1036_p3 <= (tmp_V_70_reg_1344 & ap_const_lv5_0);
    shl_ln1118_509_fu_1053_p3 <= (tmp_V_70_reg_1344 & ap_const_lv1_0);
    shl_ln1118_510_fu_1084_p3 <= (tmp_V_71_reg_1350 & ap_const_lv5_0);
    shl_ln1118_511_fu_1095_p3 <= (tmp_V_71_reg_1350 & ap_const_lv2_0);
    shl_ln1118_512_fu_1146_p3 <= (tmp_V_72_reg_1357 & ap_const_lv5_0);
    shl_ln1118_513_fu_1173_p3 <= (tmp_V_72_reg_1357 & ap_const_lv4_0);
    shl_ln1118_514_fu_1190_p3 <= (tmp_V_72_reg_1357 & ap_const_lv2_0);
    shl_ln1118_s_fu_999_p3 <= (tmp_V_reg_1337 & ap_const_lv4_0);
    shl_ln_fu_992_p3 <= (tmp_V_reg_1337 & ap_const_lv6_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1118_534_fu_1047_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(sext_ln1118_1073_fu_1043_p1));
    sub_ln1118_535_fu_1064_p2 <= std_logic_vector(unsigned(sub_ln1118_534_fu_1047_p2) - unsigned(sext_ln1118_1074_fu_1060_p1));
    sub_ln1118_536_fu_1157_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(sext_ln1118_1079_fu_1153_p1));
    sub_ln1118_537_fu_1184_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(sext_ln1118_1080_fu_1180_p1));
    sub_ln1118_538_fu_1201_p2 <= std_logic_vector(unsigned(sub_ln1118_537_fu_1184_p2) - unsigned(sext_ln1118_1081_fu_1197_p1));
    sub_ln1118_fu_1010_p2 <= std_logic_vector(signed(sext_ln1118_1072_fu_1006_p1) - signed(shl_ln_fu_992_p3));
    sub_ln23_fu_884_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln23_fu_880_p1));
    tmp_326_fu_890_p4 <= sub_ln23_fu_884_p2(3 downto 2);
    trunc_ln13_fu_952_p1 <= p_Val2_s_fu_932_p9(1 - 1 downto 0);
    trunc_ln23_fu_880_p1 <= wp_idx_reg_413(4 - 1 downto 0);
    trunc_ln25_fu_906_p1 <= wp_idx_reg_413(3 - 1 downto 0);
    trunc_ln708_792_fu_1070_p4 <= sub_ln1118_535_fu_1064_p2(21 downto 6);
    trunc_ln708_793_fu_1112_p4 <= add_ln1118_fu_1106_p2(21 downto 6);
    trunc_ln708_794_fu_1122_p4 <= mul_ln1118_106_fu_426_p2(21 downto 6);
    trunc_ln708_795_fu_1136_p4 <= mul_ln1118_107_fu_432_p2(21 downto 6);
    trunc_ln708_796_fu_1163_p4 <= sub_ln1118_536_fu_1157_p2(21 downto 6);
    trunc_ln708_797_fu_1207_p4 <= sub_ln1118_538_fu_1201_p2(20 downto 6);
    trunc_ln708_s_fu_1026_p4 <= mul_ln1118_fu_455_p2(21 downto 6);
    trunc_ln9_fu_1016_p4 <= sub_ln1118_fu_1010_p2(21 downto 6);
end behav;
